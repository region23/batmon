name: üöÄ Build and Release macOS App

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: '–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: v1.0.2)'
        required: true
        default: 'v1.0.0'
        type: string
      prerelease:
        description: '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ pre-release (—Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)'
        required: false
        default: false
        type: boolean
      draft:
        description: '–°–æ–∑–¥–∞—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read
  security-events: write
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: üì¶ Install dependencies
      run: go mod tidy

    - name: üèóÔ∏è Install appify
      run: go install github.com/machinebox/appify@latest

    - name: üî® Build for Apple Silicon (arm64)
      run: |
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o batmon-arm64

    - name: üî® Build for Intel (amd64)  
      run: |
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o batmon-amd64

    - name: üîó Create universal binary
      run: |
        lipo -create -output batmon-universal batmon-arm64 batmon-amd64
        chmod +x batmon-universal

    - name: üì± Create macOS App Bundle
      run: |
        appify -name "BatMon" -icon "./logo.png" -id "com.batmon.app" -version "1.0" ./batmon-universal

    - name: üì¶ Package App for Distribution
      run: |
        # Create a clean directory for distribution
        mkdir -p dist
        mv BatMon.app dist/
        cd dist
        zip -r BatMon.zip BatMon.app
        # Create checksum
        shasum -a 256 BatMon.zip > BatMon.zip.sha256

    - name: üìä Get version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "is_tag=true" >> $GITHUB_OUTPUT
          echo "is_manual=true" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "is_tag=true" >> $GITHUB_OUTPUT
          echo "is_manual=false" >> $GITHUB_OUTPUT
        else
          echo "version=dev-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "is_tag=false" >> $GITHUB_OUTPUT
          echo "is_manual=false" >> $GITHUB_OUTPUT
        fi

    - name: üè∑Ô∏è Create tag for manual release
      if: steps.version.outputs.is_manual == 'true'
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
        git push origin ${{ steps.version.outputs.version }}

    - name: üöÄ Create Release (for tags only)
      if: steps.version.outputs.is_tag == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        files: |
          dist/BatMon.zip
          dist/BatMon.zip.sha256
        draft: ${{ github.event.inputs.draft == 'true' }}
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        body: |
          ## üîã BatMon ${{ steps.version.outputs.version }}
          
          ### üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          
          1. **–°–∫–∞—á–∞–π—Ç–µ**: `BatMon.zip` –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∏–∂–µ
          2. **–†–∞—Å–ø–∞–∫—É–π—Ç–µ**: –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É zip-—Ñ–∞–π–ª—É  
          3. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ**: –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ `BatMon.app`
          4. **–ì–æ—Ç–æ–≤–æ!** –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º
          
          ### ‚ú® –ß—Ç–æ –Ω–æ–≤–æ–≥–æ
          - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞—Ç–∞—Ä–µ–∏ MacBook (100% ‚Üí 0%)
          - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Å—ã–ø–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
          - –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
          - –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∑–∞–º–µ–Ω–µ
          - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
          
          ### üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
          - –§–∞–π–ª –ø–æ–¥–ø–∏—Å–∞–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º–æ–π SHA256
          - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: `shasum -a 256 BatMon.zip` (–¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞—Å—Ç—å —Å .sha256 —Ñ–∞–π–ª–æ–º)
          
          ### üíª –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
          - ‚úÖ MacBook —Å Apple Silicon (M1, M2, M3)
          - ‚úÖ MacBook —Å Intel –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º–∏
          - ‚úÖ macOS 12.0+ (Monterey –∏ –Ω–æ–≤–µ–µ)
          
          ### üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞
          –ï—Å–ª–∏ macOS –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
          1. –û—Ç–∫—Ä–æ–π—Ç–µ **–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** ‚Üí **–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**
          2. –ù–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ BatMon –∏ –Ω–∞–∂–º–∏—Ç–µ **–í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å**
          3. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –¢–µ—Ä–º–∏–Ω–∞–ª–µ: `xattr -d com.apple.quarantine /path/to/BatMon.app`
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: üì§ Upload Artifact (for all builds)
      uses: actions/upload-artifact@v4
      with:
        name: BatMon-${{ steps.version.outputs.version }}
        path: |
          dist/BatMon.zip
          dist/BatMon.zip.sha256
        retention-days: 30