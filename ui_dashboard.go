package main

import (
	"fmt"
	"strings"
	"time"

	"github.com/charmbracelet/lipgloss"
)

// renderDashboard —Ä–µ–Ω–¥–µ—Ä–∏—Ç dashboard
func (a *App) renderDashboard() string {
	if a.latest == nil {
		return a.renderLoadingScreen()
	}
	
	// –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏
	contentWidth := a.windowWidth - 4   // –û—Ç—Å—Ç—É–ø—ã
	contentHeight := a.windowHeight - 4 // –û—Ç—Å—Ç—É–ø—ã
	
	if contentWidth < 60 || contentHeight < 20 {
		return a.renderCompactDashboard()
	}
	
	// –†–µ–Ω–¥–µ—Ä–∏–º –ø–æ–ª–Ω—ã–π dashboard
	fullContent := a.renderFullDashboard(contentWidth, contentHeight)
	
	// –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –≤–ª–µ–∑–∞–µ—Ç –ø–æ –≤—ã—Å–æ—Ç–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª
	contentLines := strings.Split(fullContent, "\n")
	if len(contentLines) > contentHeight {
		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª
		start := a.dashboardScrollY
		end := start + contentHeight
		if end > len(contentLines) {
			end = len(contentLines)
		}
		if start > len(contentLines)-contentHeight {
			start = max(0, len(contentLines)-contentHeight)
			a.dashboardScrollY = start
		}
		
		scrolledContent := strings.Join(contentLines[start:end], "\n")
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∫—Ä–æ–ª–ª–∞
		scrollInfo := ""
		if a.dashboardScrollY > 0 || end < len(contentLines) {
			scrollInfo = fmt.Sprintf("   ‚Üï –°–∫—Ä–æ–ª–ª: %d/%d (‚Üë‚Üì/kj)", a.dashboardScrollY+1, len(contentLines)-contentHeight+1)
			scrolledContent += "\n" + lipgloss.NewStyle().Foreground(lipgloss.Color("240")).Render(scrollInfo)
		}
		
		return scrolledContent
	}
	
	return fullContent
}

// renderFullDashboard —Ä–µ–Ω–¥–µ—Ä–∏—Ç –ø–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
func (a *App) renderFullDashboard(contentWidth, contentHeight int) string {
	var content strings.Builder
	
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	title := lipgloss.NewStyle().
		Bold(true).
		Foreground(lipgloss.Color("39")).
		Align(lipgloss.Center).
		Width(contentWidth).
		Render("üîã BatMon Dashboard")
	
	content.WriteString(title)
	content.WriteString("\n\n")
	
	// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ
	content.WriteString(a.renderMainBatteryInfo())
	content.WriteString("\n")
	
	// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
	content.WriteString(a.renderProgressBars())
	content.WriteString("\n")
	
	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	content.WriteString(a.renderExtendedInfo())
	content.WriteString("\n")
	
	// –ú–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
	if len(a.measurements) > 0 {
		content.WriteString(a.renderMiniChart())
		content.WriteString("\n")
	}
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	content.WriteString(a.renderStatsAndRecommendations())
	content.WriteString("\n")
	
	// –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	content.WriteString(a.renderDashboardControls())
	
	return content.String()
}

// renderCompactDashboard —Ä–µ–Ω–¥–µ—Ä–∏—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–∞—à–±–æ—Ä–¥–∞
func (a *App) renderCompactDashboard() string {
	var content strings.Builder
	
	// –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
	content.WriteString("üîã BatMon\n")
	content.WriteString(fmt.Sprintf("–ó–∞—Ä—è–¥: %d%% | %s\n", 
		a.latest.Percentage, 
		formatStateWithEmoji(a.latest.State, a.latest.Percentage)))
	
	if a.latest.FullChargeCap > 0 && a.latest.DesignCapacity > 0 {
		wear := computeWear(a.latest.DesignCapacity, a.latest.FullChargeCap)
		content.WriteString(fmt.Sprintf("–ò–∑–Ω–æ—Å: %.1f%%\n", wear))
	}
	
	if a.latest.Temperature > 0 {
		content.WriteString(fmt.Sprintf("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C\n", a.latest.Temperature))
	}
	
	content.WriteString("\n–ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
	
	return content.String()
}

// renderLoadingScreen —Ä–µ–Ω–¥–µ—Ä–∏—Ç —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
func (a *App) renderLoadingScreen() string {
	var content strings.Builder
	
	content.WriteString("üîã BatMon Dashboard\n\n")
	content.WriteString("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞—Ç–∞—Ä–µ–µ...")
	
	if a.dashboard.updating {
		content.WriteString(" [–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ]")
	}
	
	content.WriteString("\n\n")
	content.WriteString("–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–∏—Å—Ç–µ–º—ã...\n")
	content.WriteString("–ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å, –Ω–∞–∂–º–∏—Ç–µ 'r' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
	
	return content.String()
}

// renderMainBatteryInfo —Ä–µ–Ω–¥–µ—Ä–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ
func (a *App) renderMainBatteryInfo() string {
	var content strings.Builder
	
	// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞—Ä—è–¥–æ–º
	batteryIcon := "üîã"
	if a.latest.Percentage < 20 {
		batteryIcon = "ü™´"
	} else if a.latest.State == "charging" {
		batteryIcon = "‚ö°"
	}
	
	mainInfo := fmt.Sprintf("%s %d%% ‚Ä¢ %s", 
		batteryIcon, 
		a.latest.Percentage,
		formatStateWithEmoji(a.latest.State, a.latest.Percentage))
	
	content.WriteString(lipgloss.NewStyle().
		Bold(true).
		Foreground(getBatteryColor(a.latest.Percentage)).
		Render(mainInfo))
	
	content.WriteString("\n")
	
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
	leftColumn := []string{}
	rightColumn := []string{}
	
	if a.latest.CycleCount > 0 {
		leftColumn = append(leftColumn, fmt.Sprintf("–¶–∏–∫–ª—ã: %d", a.latest.CycleCount))
	}
	
	if a.latest.FullChargeCap > 0 {
		rightColumn = append(rightColumn, fmt.Sprintf("–ï–º–∫–æ—Å—Ç—å: %d –º–ê—á", a.latest.FullChargeCap))
	}
	
	if a.latest.Temperature > 0 {
		tempColor := "green"
		if a.latest.Temperature > 35 {
			tempColor = "yellow"
		}
		if a.latest.Temperature > 45 {
			tempColor = "red"
		}
		
		leftColumn = append(leftColumn, 
			lipgloss.NewStyle().
				Foreground(lipgloss.Color(tempColor)).
				Render(fmt.Sprintf("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C", a.latest.Temperature)))
	}
	
	if a.latest.Voltage > 0 {
		rightColumn = append(rightColumn, fmt.Sprintf("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: %d –º–í", a.latest.Voltage))
	}
	
	// –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–ª–æ–Ω–∫–∏
	maxLines := max(len(leftColumn), len(rightColumn))
	for i := 0; i < maxLines; i++ {
		left := ""
		right := ""
		
		if i < len(leftColumn) {
			left = leftColumn[i]
		}
		if i < len(rightColumn) {
			right = rightColumn[i]
		}
		
		content.WriteString(fmt.Sprintf("%-30s %s\n", left, right))
	}
	
	return content.String()
}

// renderProgressBars —Ä–µ–Ω–¥–µ—Ä–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
func (a *App) renderProgressBars() string {
	var content strings.Builder
	
	// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞—Ä—è–¥–∞
	batteryPercent := float64(a.latest.Percentage) / 100.0
	content.WriteString("–ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏:\n")
	content.WriteString(a.dashboard.batteryGauge.ViewAs(batteryPercent))
	content.WriteString(fmt.Sprintf(" %d%%\n", a.latest.Percentage))
	
	// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑–Ω–æ—Å–∞
	if a.latest.FullChargeCap > 0 && a.latest.DesignCapacity > 0 {
		wear := computeWear(a.latest.DesignCapacity, a.latest.FullChargeCap)
		wearPercent := wear / 30.0 // –ú–∞–∫—Å–∏–º—É–º 30% –∏–∑–Ω–æ—Å–∞
		if wearPercent > 1.0 {
			wearPercent = 1.0
		}
		
		content.WriteString("\n–ò–∑–Ω–æ—Å –±–∞—Ç–∞—Ä–µ–∏:\n")
		content.WriteString(a.dashboard.wearGauge.ViewAs(wearPercent))
		content.WriteString(fmt.Sprintf(" %.1f%%\n", wear))
	}
	
	return content.String()
}

// renderExtendedInfo —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
func (a *App) renderExtendedInfo() string {
	var content strings.Builder
	
	content.WriteString("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n")
	content.WriteString(strings.Repeat("‚îÄ", 50) + "\n")
	
	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–º–∫–æ—Å—Ç–∏
	if a.latest.DesignCapacity > 0 {
		content.WriteString(fmt.Sprintf("–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –µ–º–∫–æ—Å—Ç—å: %d –º–ê—á\n", a.latest.DesignCapacity))
	}
	
	if a.latest.CurrentCapacity > 0 {
		content.WriteString(fmt.Sprintf("–¢–µ–∫—É—â–∞—è –µ–º–∫–æ—Å—Ç—å: %d –º–ê—á\n", a.latest.CurrentCapacity))
	}
	
	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏
	if a.latest.Power != 0 {
		powerStr := fmt.Sprintf("%.1f –í—Ç", float64(a.latest.Power)/1000.0)
		if a.latest.Power > 0 {
			powerStr = "+" + powerStr + " (–∑–∞—Ä—è–¥–∫–∞)"
		} else {
			powerStr = powerStr + " (—Ä–∞–∑—Ä—è–¥–∫–∞)"
		}
		content.WriteString(fmt.Sprintf("–ú–æ—â–Ω–æ—Å—Ç—å: %s\n", powerStr))
	}
	
	if a.latest.Amperage != 0 {
		content.WriteString(fmt.Sprintf("–¢–æ–∫: %d –º–ê\n", a.latest.Amperage))
	}
	
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç Apple
	if a.latest.AppleCondition != "" {
		conditionColor := "green"
		icon := "‚úÖ"
		
		condition := strings.ToLower(a.latest.AppleCondition)
		if strings.Contains(condition, "service") || strings.Contains(condition, "replace") {
			conditionColor = "red"
			icon = "‚ö†Ô∏è"
		} else if strings.Contains(condition, "fair") {
			conditionColor = "yellow"
			icon = "‚ö†Ô∏è"
		}
		
		content.WriteString(fmt.Sprintf("–°–æ—Å—Ç–æ—è–Ω–∏–µ: %s %s\n", 
			icon,
			lipgloss.NewStyle().
				Foreground(lipgloss.Color(conditionColor)).
				Render(a.latest.AppleCondition)))
	}
	
	// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	if !a.dashboard.lastUpdate.IsZero() {
		content.WriteString(fmt.Sprintf("\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s\n", 
			a.dashboard.lastUpdate.Format("15:04:05")))
	}
	
	return content.String()
}

// renderMiniChart —Ä–µ–Ω–¥–µ—Ä–∏—Ç –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
func (a *App) renderMiniChart() string {
	var content strings.Builder
	
	content.WriteString("üìà –ò—Å—Ç–æ—Ä–∏—è –∑–∞—Ä—è–¥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∏–∑–º–µ—Ä–µ–Ω–∏–π)\n")
	content.WriteString(strings.Repeat("‚îÄ", 50) + "\n")
	
	// –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∏–∑–º–µ—Ä–µ–Ω–∏–π
	measurements := a.measurements
	if len(measurements) > 20 {
		measurements = measurements[len(measurements)-20:]
	}
	
	if len(measurements) < 2 {
		content.WriteString("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞\n")
		return content.String()
	}
	
	// –ü—Ä–æ—Å—Ç–æ–π ASCII –≥—Ä–∞—Ñ–∏–∫
	chart := a.renderASCIIChart(measurements, 40, 8)
	content.WriteString(chart)
	
	return content.String()
}

// renderASCIIChart —Ä–µ–Ω–¥–µ—Ä–∏—Ç –ø—Ä–æ—Å—Ç–æ–π ASCII –≥—Ä–∞—Ñ–∏–∫
func (a *App) renderASCIIChart(measurements []Measurement, width, height int) string {
	if len(measurements) < 2 {
		return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n"
	}
	
	var content strings.Builder
	
	// –ù–∞—Ö–æ–¥–∏–º min/max –∑–Ω–∞—á–µ–Ω–∏—è
	minVal, maxVal := measurements[0].Percentage, measurements[0].Percentage
	for _, m := range measurements {
		if m.Percentage < minVal {
			minVal = m.Percentage
		}
		if m.Percentage > maxVal {
			maxVal = m.Percentage
		}
	}
	
	// –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
	if maxVal == minVal {
		maxVal = minVal + 1
	}
	
	// –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
	for y := height - 1; y >= 0; y-- {
		line := ""
		threshold := minVal + (maxVal-minVal)*y/height
		
		for i := 0; i < width && i < len(measurements); i++ {
			measurementIndex := i * len(measurements) / width
			if measurementIndex >= len(measurements) {
				measurementIndex = len(measurements) - 1
			}
			
			value := measurements[measurementIndex].Percentage
			if value >= threshold {
				line += "‚ñà"
			} else if value >= threshold-((maxVal-minVal)/height/2) {
				line += "‚ñÑ"
			} else {
				line += " "
			}
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º —à–∫–∞–ª—É
		label := fmt.Sprintf("%3d%%", threshold)
		if y == height-1 {
			label = fmt.Sprintf("%3d%%", maxVal)
		} else if y == 0 {
			label = fmt.Sprintf("%3d%%", minVal)
		}
		
		content.WriteString(fmt.Sprintf("%s ‚îÇ%s\n", label, line))
	}
	
	// –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å—å
	content.WriteString("     ‚îî" + strings.Repeat("‚îÄ", width) + "\n")
	
	// –ú–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
	if len(measurements) >= 2 {
		first, _ := time.Parse(time.RFC3339, measurements[0].Timestamp)
		last, _ := time.Parse(time.RFC3339, measurements[len(measurements)-1].Timestamp)
		
		timeRange := fmt.Sprintf("      %s ‚Üí %s", 
			first.Format("15:04"), 
			last.Format("15:04"))
		content.WriteString(timeRange + "\n")
	}
	
	return content.String()
}

// renderStatsAndRecommendations —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
func (a *App) renderStatsAndRecommendations() string {
	var content strings.Builder
	
	content.WriteString("üí° –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n")
	content.WriteString(strings.Repeat("‚îÄ", 50) + "\n")
	
	recommendations := []string{}
	
	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—Ä—è–¥—É
	if a.latest.Percentage < 20 && a.latest.State != "charging" {
		recommendations = append(recommendations, "üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
	} else if a.latest.Percentage == 100 && a.latest.State == "charging" {
		recommendations = append(recommendations, "üîã –û—Ç–∫–ª—é—á–∏—Ç–µ –∑–∞—Ä—è–¥–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã")
	}
	
	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
	if a.latest.Temperature > 40 {
		recommendations = append(recommendations, "üå°Ô∏è –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - –∑–∞–∫—Ä–æ–π—Ç–µ —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
	}
	
	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑–Ω–æ—Å—É
	if a.latest.FullChargeCap > 0 && a.latest.DesignCapacity > 0 {
		wear := computeWear(a.latest.DesignCapacity, a.latest.FullChargeCap)
		if wear > 20 {
			recommendations = append(recommendations, "‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π –∏–∑–Ω–æ—Å - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–º–µ–Ω—É –±–∞—Ç–∞—Ä–µ–∏")
		}
	}
	
	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–∏–∫–ª–∞–º
	if a.latest.CycleCount > 800 {
		recommendations = append(recommendations, "üîÑ –ú–Ω–æ–≥–æ —Ü–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∫–∏ - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –µ–º–∫–æ—Å—Ç—å—é")
	}
	
	if len(recommendations) == 0 {
		recommendations = append(recommendations, "‚úÖ –ë–∞—Ç–∞—Ä–µ—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
	}
	
	for _, rec := range recommendations {
		content.WriteString("‚Ä¢ " + rec + "\n")
	}
	
	return content.String()
}

// renderDashboardControls —Ä–µ–Ω–¥–µ—Ä–∏—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
func (a *App) renderDashboardControls() string {
	controls := []string{
		"q - –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é",
		"r - –û–±–Ω–æ–≤–∏—Ç—å",
		"‚Üë‚Üì - –°–∫—Ä–æ–ª–ª",
		"h - –°–ø—Ä–∞–≤–∫–∞",
	}
	
	controlsText := strings.Join(controls, " ‚Ä¢ ")
	
	return lipgloss.NewStyle().
		Foreground(lipgloss.Color("241")).
		Render(controlsText)
}

// getBatteryColor –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
func getBatteryColor(percentage int) lipgloss.Color {
	switch {
	case percentage >= 80:
		return lipgloss.Color("green")
	case percentage >= 50:
		return lipgloss.Color("yellow")
	case percentage >= 20:
		return lipgloss.Color("orange")
	default:
		return lipgloss.Color("red")
	}
}