package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
	"sync"
	"time"

	"github.com/jmoiron/sqlx"
)

const (
	pmsetInterval    = 30 * time.Second // –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ pmset
	profilerInterval = 2 * time.Minute  // –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ system_profiler
)

// DataCollector —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
type DataCollector struct {
	db               *sqlx.DB
	buffer           *MemoryBuffer
	retention        *DataRetention
	lastProfilerCall time.Time
	pmsetInterval    time.Duration
	profilerInterval time.Duration
}

// MemoryBuffer - –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
type MemoryBuffer struct {
	measurements    []Measurement
	maxSize         int
	mu              sync.RWMutex
	lastCleanup     time.Time
	cleanupInterval time.Duration
}

// DataRetention —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ç–µ–Ω—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
type DataRetention struct {
	db              *sqlx.DB
	retentionPeriod time.Duration
	lastCleanup     time.Time
	cleanupInterval time.Duration
}

// DataService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∞—Ç–∞—Ä–µ–∏
type DataService struct {
	collector        *DataCollector
	db               *sqlx.DB
	buffer           *MemoryBuffer
	ctx              context.Context
	cancel           context.CancelFunc
	caffeinate       *exec.Cmd
	caffeineActive   bool
}

// NewMemoryBuffer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏
func NewMemoryBuffer(maxSize int) *MemoryBuffer {
	return &MemoryBuffer{
		measurements:    make([]Measurement, 0, maxSize),
		maxSize:         maxSize,
		lastCleanup:     time.Now(),
		cleanupInterval: 24 * time.Hour, // –û—á–∏—Å—Ç–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
	}
}

// Add –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
func (mb *MemoryBuffer) Add(m Measurement) {
	mb.mu.Lock()
	defer mb.mu.Unlock()

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
	mb.measurements = append(mb.measurements, m)

	// –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
	if len(mb.measurements) > mb.maxSize {
		// –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
		keepFrom := len(mb.measurements) - mb.maxSize + mb.maxSize/4
		mb.measurements = mb.measurements[keepFrom:]
	}
}

// GetLast –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞
func (mb *MemoryBuffer) GetLast(n int) []Measurement {
	mb.mu.RLock()
	defer mb.mu.RUnlock()

	if len(mb.measurements) == 0 {
		return nil
	}

	if n >= len(mb.measurements) {
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –≤—Å–µ—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
		result := make([]Measurement, len(mb.measurements))
		copy(result, mb.measurements)
		return result
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö n –∏–∑–º–µ—Ä–µ–Ω–∏–π
	start := len(mb.measurements) - n
	result := make([]Measurement, n)
	copy(result, mb.measurements[start:])
	return result
}

// GetLatest –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
func (mb *MemoryBuffer) GetLatest() *Measurement {
	mb.mu.RLock()
	defer mb.mu.RUnlock()

	if len(mb.measurements) == 0 {
		return nil
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
	latest := mb.measurements[len(mb.measurements)-1]
	return &latest
}

// Size –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
func (mb *MemoryBuffer) Size() int {
	mb.mu.RLock()
	defer mb.mu.RUnlock()
	return len(mb.measurements)
}

// LoadFromDB –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä
func (mb *MemoryBuffer) LoadFromDB(db *sqlx.DB, count int) error {
	measurements, err := getLastNMeasurements(db, count)
	if err != nil {
		return fmt.Errorf("–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î: %w", err)
	}

	mb.mu.Lock()
	defer mb.mu.Unlock()

	mb.measurements = measurements
	return nil
}

// NewDataRetention —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Ç–µ–Ω—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
func NewDataRetention(db *sqlx.DB, retentionPeriod time.Duration) *DataRetention {
	return &DataRetention{
		db:              db,
		retentionPeriod: retentionPeriod,
		lastCleanup:     time.Now(),
		cleanupInterval: 6 * time.Hour, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
	}
}

// Cleanup —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
func (dr *DataRetention) Cleanup() error {
	if time.Since(dr.lastCleanup) < dr.cleanupInterval {
		return nil // –ï—â–µ —Ä–∞–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
	}

	cutoffTime := time.Now().Add(-dr.retentionPeriod)

	result, err := dr.db.Exec(`
		DELETE FROM measurements 
		WHERE timestamp < ?
	`, cutoffTime.Format(time.RFC3339))

	if err != nil {
		return fmt.Errorf("–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	rowsAffected, _ := result.RowsAffected()
	if rowsAffected > 0 {
		log.Printf("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ %d —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ %v)", rowsAffected, dr.retentionPeriod)

		// –í—ã–ø–æ–ª–Ω—è–µ–º VACUUM –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞
		_, err = dr.db.Exec("VACUUM")
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ VACUUM: %v", err)
		}
	}

	dr.lastCleanup = time.Now()
	return nil
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º –≤ –ë–î
func (dr *DataRetention) GetStats() (map[string]interface{}, error) {
	var stats map[string]interface{} = make(map[string]interface{})

	// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
	var totalCount int
	err := dr.db.Get(&totalCount, "SELECT COUNT(*) FROM measurements")
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π: %w", err)
	}
	stats["total_records"] = totalCount

	// –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
	var oldestDate, newestDate string
	err = dr.db.Get(&oldestDate, "SELECT MIN(timestamp) FROM measurements")
	if err == nil {
		stats["oldest_record"] = oldestDate
	}

	err = dr.db.Get(&newestDate, "SELECT MAX(timestamp) FROM measurements")
	if err == nil {
		stats["newest_record"] = newestDate
	}

	// –†–∞–∑–º–µ—Ä –ë–î —Ñ–∞–π–ª–∞
	if dbFileInfo, err := os.Stat(getDBPath()); err == nil {
		stats["db_size_mb"] = float64(dbFileInfo.Size()) / (1024 * 1024)
	}

	return stats, nil
}

// NewDataCollector —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
func NewDataCollector(db *sqlx.DB) *DataCollector {
	buffer := NewMemoryBuffer(100)                     // –ë—É—Ñ–µ—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
	retention := NewDataRetention(db, 90*24*time.Hour) // –•—Ä–∞–Ω–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞

	collector := &DataCollector{
		db:               db,
		buffer:           buffer,
		retention:        retention,
		lastProfilerCall: time.Time{},
		pmsetInterval:    30 * time.Second,
		profilerInterval: 2 * time.Minute,
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
	if err := buffer.LoadFromDB(db, 100); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä: %v", err)
	} else {
		log.Printf("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏", buffer.Size())
	}

	return collector
}

// collectAndStore —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î –∏ –±—É—Ñ–µ—Ä
func (dc *DataCollector) collectAndStore() error {
	// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç pmset
	pct, state, pmErr := parsePMSet()
	if pmErr != nil {
		return fmt.Errorf("—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö pmset: %w", pmErr)
	}

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
	m := &Measurement{
		Timestamp:       time.Now().UTC().Format(time.RFC3339),
		Percentage:      pct,
		State:           state,
		CycleCount:      0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏–∂–µ
		FullChargeCap:   0,
		DesignCapacity:  0,
		CurrentCapacity: 0,
		Temperature:     0,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç ioreg, –µ—Å–ª–∏ –ø–æ—Ä–∞
	if time.Since(dc.lastProfilerCall) >= dc.profilerInterval {
		cycle, fullCap, designCap, currCap, temperature, voltage, amperage, condition, ioErr := parseIORegistry()
		if ioErr == nil {
			m.CycleCount = cycle
			m.FullChargeCap = fullCap
			m.DesignCapacity = designCap
			m.CurrentCapacity = currCap
			m.Temperature = temperature
			m.Voltage = voltage
			m.Amperage = amperage
			m.AppleCondition = condition

			// –í—ã—á–∏—Å–ª—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å
			if voltage > 0 && amperage != 0 {
				m.Power = (voltage * amperage) / 1000
			}

			dc.lastProfilerCall = time.Now()
		} else {
			// –ï—Å–ª–∏ ioreg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
			if latest := dc.buffer.GetLatest(); latest != nil {
				m.CycleCount = latest.CycleCount
				m.FullChargeCap = latest.FullChargeCap
				m.DesignCapacity = latest.DesignCapacity
				m.CurrentCapacity = latest.CurrentCapacity
				m.Temperature = latest.Temperature
				m.Voltage = latest.Voltage
				m.Amperage = latest.Amperage
				m.Power = latest.Power
				m.AppleCondition = latest.AppleCondition
			}
			log.Printf("‚ö†Ô∏è ioreg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: %v", ioErr)
		}
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
		if latest := dc.buffer.GetLatest(); latest != nil {
			m.CycleCount = latest.CycleCount
			m.FullChargeCap = latest.FullChargeCap
			m.DesignCapacity = latest.DesignCapacity
			m.CurrentCapacity = latest.CurrentCapacity
			m.Temperature = latest.Temperature
			// –ö–æ–ø–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è, —Ç–æ–∫–∞ –∏ –º–æ—â–Ω–æ—Å—Ç–∏
			m.Voltage = latest.Voltage
			m.Amperage = latest.Amperage
			m.Power = latest.Power
			m.AppleCondition = latest.AppleCondition
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	if err := insertMeasurement(dc.db, m); err != nil {
		return fmt.Errorf("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: %w", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏
	dc.buffer.Add(*m)

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if err := dc.retention.Cleanup(); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	return nil
}

// GetLatestFromBuffer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ (–±—ã—Å—Ç—Ä–æ)
func (dc *DataCollector) GetLatestFromBuffer() *Measurement {
	return dc.buffer.GetLatest()
}

// GetLastNFromBuffer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞ (–±—ã—Å—Ç—Ä–æ)
func (dc *DataCollector) GetLastNFromBuffer(n int) []Measurement {
	return dc.buffer.GetLast(n)
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º
func (dc *DataCollector) GetStats() (map[string]interface{}, error) {
	dbStats, err := dc.retention.GetStats()
	if err != nil {
		return nil, fmt.Errorf("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: %w", err)
	}

	dbStats["buffer_size"] = dc.buffer.Size()
	dbStats["buffer_max_size"] = dc.buffer.maxSize

	return dbStats, nil
}

// CollectAndStore - –ø—É–±–ª–∏—á–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è collectAndStore
func (dc *DataCollector) CollectAndStore() error {
	return dc.collectAndStore()
}

// backgroundDataCollection –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
func backgroundDataCollection(db *sqlx.DB, ctx context.Context, wg *sync.WaitGroup) {
	defer wg.Done()

	// –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
	collector := NewDataCollector(db)

	// –î–µ–ª–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
	if err := collector.collectAndStore(); err != nil {
		log.Printf("‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: %v", err)
	}

	ticker := time.NewTicker(collector.pmsetInterval)
	defer ticker.Stop()

	log.Printf("üîÑ –§–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω (pmset: %v, system_profiler: %v)",
		collector.pmsetInterval, collector.profilerInterval)

	for {
		select {
		case <-ctx.Done():
			log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
			return
		case <-ticker.C:
			if err := collector.collectAndStore(); err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: %v", err)
				continue
			}

			// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–æ–≥–¥–∞
			if collector.buffer.Size()%50 == 0 && collector.buffer.Size() > 0 {
				stats, err := collector.GetStats()
				if err == nil {
					log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –±—É—Ñ–µ—Ä %d/%d, –ë–î %v –∑–∞–ø–∏—Å–µ–π",
						stats["buffer_size"], stats["buffer_max_size"], stats["total_records"])
				}
			}

			// –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
			latest := collector.GetLatestFromBuffer()
			if latest != nil {
				if strings.ToLower(latest.State) == "charging" && latest.Percentage >= 100 {
					log.Println("üîã –ë–∞—Ç–∞—Ä–µ—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω–∞, –∑–∞–º–µ–¥–ª—è–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
					ticker.Reset(5 * time.Minute)
				} else if strings.ToLower(latest.State) == "discharging" {
					// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑—Ä—è–¥–∫–µ
					ticker.Reset(collector.pmsetInterval)
				}
			}
		}
	}
}

// NewDataService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö
func NewDataService(db *sqlx.DB, buffer *MemoryBuffer) *DataService {
	ctx, cancel := context.WithCancel(context.Background())
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é NewDataCollector –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	collector := NewDataCollector(db)
	// –ó–∞–º–µ–Ω—è–µ–º –±—É—Ñ–µ—Ä –Ω–∞ –Ω–∞—à
	collector.buffer = buffer
	
	return &DataService{
		collector: collector,
		db:        db,
		buffer:    buffer,
		ctx:       ctx,
		cancel:    cancel,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
func (ds *DataService) Start() {
	ds.startCaffeinate()
	go ds.collectData()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
func (ds *DataService) Stop() {
	ds.stopCaffeinate()
	ds.cancel()
}

// startCaffeinate –∑–∞–ø—É—Å–∫–∞–µ—Ç caffeinate –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è
func (ds *DataService) startCaffeinate() {
	if ds.caffeineActive {
		return
	}
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º -i —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è idle –∑–∞—Å—ã–ø–∞–Ω–∏—è
	// –≠—Ç–æ –Ω–µ –º–µ—à–∞–µ—Ç –∑–∞—Å—ã–ø–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫—Ä—ã—à–∫–∏
	ds.caffeinate = exec.CommandContext(ds.ctx, "caffeinate", "-i")
	
	err := ds.caffeinate.Start()
	if err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å caffeinate: %v", err)
		return
	}
	
	ds.caffeineActive = true
	log.Println("‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Å—ã–ø–∞–Ω–∏—è MacBook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
	go func() {
		ds.caffeinate.Wait()
		ds.caffeineActive = false
	}()
}

// stopCaffeinate –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç caffeinate
func (ds *DataService) stopCaffeinate() {
	if !ds.caffeineActive || ds.caffeinate == nil {
		return
	}
	
	err := ds.caffeinate.Process.Kill()
	if err != nil {
		log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å caffeinate: %v", err)
	} else {
		log.Println("üõå –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Å—ã–ø–∞–Ω–∏—è MacBook –æ—Ç–∫–ª—é—á–µ–Ω–æ")
	}
	
	ds.caffeineActive = false
	ds.caffeinate = nil
}

// collectData –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
func (ds *DataService) collectData() {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()
	
	for {
		select {
		case <-ds.ctx.Done():
			return
		case <-ticker.C:
			// –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
			go func() {
				if err := ds.collector.CollectAndStore(); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: %v", err)
				}
			}()
		}
	}
}

// GetLatest –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
func (ds *DataService) GetLatest() *Measurement {
	return ds.buffer.GetLatest()
}

// GetLast –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–∑–º–µ—Ä–µ–Ω–∏–π
func (ds *DataService) GetLast(n int) []Measurement {
	return ds.buffer.GetLast(n)
}