package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

// getDataDir –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É XDG
func getDataDir() (string, error) {
	var dataDir string
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–° —Å–ª–µ–¥—É—è XDG Base Directory Specification
	switch runtime.GOOS {
	case "windows":
		// Windows: %LOCALAPPDATA%\batmon (–∏–ª–∏ %APPDATA%\batmon)
		if localAppData := os.Getenv("LOCALAPPDATA"); localAppData != "" {
			dataDir = filepath.Join(localAppData, "batmon")
		} else if appData := os.Getenv("APPDATA"); appData != "" {
			dataDir = filepath.Join(appData, "batmon")
		} else {
			homeDir, err := os.UserHomeDir()
			if err != nil {
				return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –ø–∞–ø–∫—É: %w", err)
			}
			dataDir = filepath.Join(homeDir, "AppData", "Local", "batmon")
		}
		
	case "darwin":
		// macOS: ~/.local/share/batmon (XDG-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ, –∫–∞–∫ –Ω–∞ Linux)
		homeDir, err := os.UserHomeDir()
		if err != nil {
			return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –ø–∞–ø–∫—É: %w", err)
		}
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º XDG_DATA_HOME –∏–ª–∏ ~/.local/share
		if xdgDataHome := os.Getenv("XDG_DATA_HOME"); xdgDataHome != "" {
			dataDir = filepath.Join(xdgDataHome, "batmon")
		} else {
			dataDir = filepath.Join(homeDir, ".local", "share", "batmon")
		}
		
	default:
		// Linux –∏ –¥—Ä—É–≥–∏–µ Unix: ~/.local/share/batmon (XDG Base Directory)
		homeDir, err := os.UserHomeDir()
		if err != nil {
			return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –ø–∞–ø–∫—É: %w", err)
		}
		
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º XDG_DATA_HOME –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏–Ω–∞—á–µ ~/.local/share
		if xdgDataHome := os.Getenv("XDG_DATA_HOME"); xdgDataHome != "" {
			dataDir = filepath.Join(xdgDataHome, "batmon")
		} else {
			dataDir = filepath.Join(homeDir, ".local", "share", "batmon")
		}
	}
	
	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	if err := os.MkdirAll(dataDir, 0755); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	
	return dataDir, nil
}

// getDBPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func getDBPath() string {
	dataDir, err := getDataDir()
	if err != nil {
		// Fallback –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É: %v", err)
		return "batmon.sqlite"
	}
	
	return filepath.Join(dataDir, "batmon.sqlite")
}

// getDocumentsDir –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ Documents –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getDocumentsDir() (string, error) {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –ø–∞–ø–∫—É: %w", err)
	}
	
	documentsDir := filepath.Join(homeDir, "Documents")
	return documentsDir, nil
}

// getExportPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
func getExportPath(filename string) (string, error) {
	// –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
	if filepath.IsAbs(filename) {
		return filename, nil
	}
	
	// –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø—É—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å)
	if strings.Contains(filename, string(filepath.Separator)) {
		return filename, nil
	}
	
	// –ò–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Documents
	documentsDir, err := getDocumentsDir()
	if err != nil {
		// Fallback –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
		return filename, nil
	}
	
	return filepath.Join(documentsDir, filename), nil
}

// formatStateWithEmoji –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–∞—Ç–∞—Ä–µ–∏
func formatStateWithEmoji(state string, percentage int) string {
	if state == "" {
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}

	stateLower := strings.ToLower(state)
	stateFormatted := strings.ToUpper(string(stateLower[0])) + stateLower[1:]

	switch stateLower {
	case "charging":
		if percentage >= 90 {
			return "üîã " + stateFormatted + " (–ø–æ—á—Ç–∏ –ø–æ–ª–Ω–∞—è)"
		}
		return "‚ö° " + stateFormatted
	case "discharging":
		if percentage < 20 {
			return "ü™´ " + stateFormatted + " (–Ω–∏–∑–∫–∏–π –∑–∞—Ä—è–¥)"
		} else if percentage < 50 {
			return "üîã " + stateFormatted
		}
		return "üîã " + stateFormatted
	case "charged":
		return "‚úÖ " + stateFormatted
	case "finishing":
		return "üîå " + stateFormatted
	default:
		return stateFormatted
	}
}

// formatDuration —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
func formatDuration(d time.Duration) string {
	hours := int(d.Hours())
	minutes := int(d.Minutes()) % 60
	
	if hours > 0 {
		return fmt.Sprintf("%d —á %d –º–∏–Ω", hours, minutes)
	}
	return fmt.Sprintf("%d –º–∏–Ω", minutes)
}

// normalizeKeyInput –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–≤–æ–¥ –∫–ª–∞–≤–∏—à –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func normalizeKeyInput(keyID string) string {
	// –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–ª–∞–≤–∏—à –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∫–∞—Ö –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
	keyMappings := map[string]string{
		// –†—É—Å—Å–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ (–ô–¶–£–ö–ï–ù)
		"–π": "q", // q -> –π
		"—Ü": "w", // w -> —Ü
		"—É": "e", // e -> —É
		"–∫": "r", // r -> –∫
		"–µ": "t", // t -> –µ
		"–Ω": "y", // y -> –Ω
		"–≥": "u", // u -> –≥
		"—à": "i", // i -> —à
		"—â": "o", // o -> —â
		"–∑": "p", // p -> –∑
		"—Ñ": "a", // a -> —Ñ
		"—ã": "s", // s -> —ã
		"–≤": "d", // d -> –≤
		"–∞": "f", // f -> –∞
		"–ø": "g", // g -> –ø
		"—Ä": "h", // h -> —Ä
		"–æ": "j", // j -> –æ
		"–ª": "k", // k -> –ª
		"–¥": "l", // l -> –¥
		"—è": "z", // z -> —è
		"—á": "x", // x -> —á
		"—Å": "c", // c -> —Å
		"–º": "v", // v -> –º
		"–∏": "b", // b -> –∏
		"—Ç": "n", // n -> —Ç
		"—å": "m", // m -> —å

		// –ù–µ–º–µ—Ü–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ (QWERTZ) - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
		"√º": "y", // –í –Ω–µ–º–µ—Ü–∫–æ–π y –Ω–∞ –º–µ—Å—Ç–µ √º
		"√§": "a", // –∏ —Ç.–¥.
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏
	if normalized, exists := keyMappings[keyID]; exists {
		return normalized
	}

	// –ï—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–ª–∞–≤–∏—à—É
	return keyID
}