package main

import (
	"fmt"
	"math"
	"strings"

	"github.com/charmbracelet/lipgloss"
)

// Chart –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç ASCII –≥—Ä–∞—Ñ–∏–∫
type Chart struct {
	Title       string
	Data        []float64
	Width       int
	Height      int
	MinValue    float64
	MaxValue    float64
	Color       lipgloss.Color
	ShowAxes    bool
	FixedRange  bool // –§–ª–∞–≥ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π
}

// NewChart —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
func NewChart(title string, width, height int) *Chart {
	return &Chart{
		Title:    title,
		Width:    width,
		Height:   height,
		Color:    lipgloss.Color("39"), // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		ShowAxes: true,
		Data:     make([]float64, 0),
	}
}

// SetData —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
func (c *Chart) SetData(data []float64) {
	c.Data = make([]float64, len(data))
	copy(c.Data, data)
	
	// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º Min/Max
	if c.FixedRange {
		return
	}
	
	if len(data) > 0 {
		c.MinValue = data[0]
		c.MaxValue = data[0]
		
		for _, v := range data {
			if v < c.MinValue {
				c.MinValue = v
			}
			if v > c.MaxValue {
				c.MaxValue = v
			}
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
		range_ := c.MaxValue - c.MinValue
		if range_ == 0 {
			range_ = 1
		}
		padding := range_ * 0.1
		c.MinValue -= padding
		c.MaxValue += padding
	}
}

// SetSize —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
func (c *Chart) SetSize(width, height int) {
	if width > 0 {
		c.Width = width
	}
	if height > 0 {
		c.Height = height
	}
}

// Render —Ä–µ–Ω–¥–µ—Ä–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ —Å—Ç—Ä–æ–∫—É
func (c *Chart) Render() string {
	if len(c.Data) == 0 {
		return c.renderEmpty()
	}
	
	var lines []string
	
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	if c.Title != "" {
		titleStyle := lipgloss.NewStyle().
			Bold(true).
			Foreground(c.Color).
			Align(lipgloss.Center)
		lines = append(lines, titleStyle.Width(c.Width).Render(c.Title))
	}
	
	// –ì—Ä–∞—Ñ–∏–∫
	chart := c.renderChart()
	lines = append(lines, chart...)
	
	// –û—Å–∏ –∏ –ø–æ–¥–ø–∏—Å–∏
	if c.ShowAxes {
		axes := c.renderAxes()
		lines = append(lines, axes...)
	}
	
	return strings.Join(lines, "\n")
}

// renderChart —Ä–µ–Ω–¥–µ—Ä–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∞
func (c *Chart) renderChart() []string {
	chartHeight := c.Height
	if c.ShowAxes {
		chartHeight -= 2 // –ú–µ—Å—Ç–æ –¥–ª—è –æ—Å–µ–π
	}
	
	lines := make([]string, chartHeight)
	
	// –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
	plotChars := []string{"‚ñÅ", "‚ñÇ", "‚ñÉ", "‚ñÑ", "‚ñÖ", "‚ñÜ", "‚ñá", "‚ñà"}
	
	// –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
	dataWidth := c.Width
	if c.ShowAxes {
		dataWidth -= 6 // –ú–µ—Å—Ç–æ –¥–ª—è Y-–æ—Å–∏ –∏ –æ—Ç—Å—Ç—É–ø–æ–≤
	}
	
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	chartData := c.prepareDataForWidth(dataWidth)
	
	// –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –≥—Ä–∞—Ñ–∏–∫–∞
	for row := 0; row < chartHeight; row++ {
		line := ""
		
		// Y-–æ—Å—å
		if c.ShowAxes {
			yValue := c.MaxValue - (float64(row)/float64(chartHeight-1))*(c.MaxValue-c.MinValue)
			yLabel := fmt.Sprintf("%4.0f‚îÇ", yValue)
			line += lipgloss.NewStyle().Foreground(lipgloss.Color("240")).Render(yLabel)
		}
		
		// –î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞
		for col := 0; col < len(chartData); col++ {
			value := chartData[col]
			
			// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
			normalized := (value - c.MinValue) / (c.MaxValue - c.MinValue)
			if c.MaxValue == c.MinValue {
				normalized = 0.5
			}
			
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
			targetHeight := normalized * float64(chartHeight)
			currentRowFromBottom := float64(chartHeight - 1 - row)
			
			char := " "
			if targetHeight > currentRowFromBottom {
				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
				intensity := math.Min(targetHeight-currentRowFromBottom, 1.0)
				charIndex := int(intensity * float64(len(plotChars)-1))
				if charIndex >= len(plotChars) {
					charIndex = len(plotChars) - 1
				}
				char = plotChars[charIndex]
			}
			
			// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
			styledChar := lipgloss.NewStyle().Foreground(c.Color).Render(char)
			line += styledChar
		}
		
		lines[row] = line
	}
	
	return lines
}

// prepareDataForWidth –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω—É–∂–Ω—É—é —à–∏—Ä–∏–Ω—É
func (c *Chart) prepareDataForWidth(targetWidth int) []float64 {
	if len(c.Data) == 0 {
		return make([]float64, targetWidth)
	}
	
	if len(c.Data) == targetWidth {
		return c.Data
	}
	
	result := make([]float64, targetWidth)
	
	if len(c.Data) < targetWidth {
		// –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		for i := 0; i < targetWidth; i++ {
			sourceIndex := float64(i) * float64(len(c.Data)-1) / float64(targetWidth-1)
			leftIndex := int(sourceIndex)
			rightIndex := leftIndex + 1
			
			if rightIndex >= len(c.Data) {
				result[i] = c.Data[leftIndex]
			} else {
				// –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
				t := sourceIndex - float64(leftIndex)
				result[i] = c.Data[leftIndex]*(1-t) + c.Data[rightIndex]*t
			}
		}
	} else {
		// –°–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
		step := float64(len(c.Data)) / float64(targetWidth)
		for i := 0; i < targetWidth; i++ {
			start := int(float64(i) * step)
			end := int(float64(i+1) * step)
			if end > len(c.Data) {
				end = len(c.Data)
			}
			
			sum := 0.0
			count := 0
			for j := start; j < end; j++ {
				sum += c.Data[j]
				count++
			}
			
			if count > 0 {
				result[i] = sum / float64(count)
			}
		}
	}
	
	return result
}

// renderAxes —Ä–µ–Ω–¥–µ—Ä–∏—Ç –æ—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
func (c *Chart) renderAxes() []string {
	lines := make([]string, 0)
	
	// X-–æ—Å—å
	xAxis := "    ‚îî" + strings.Repeat("‚îÄ", c.Width-6)
	lines = append(lines, lipgloss.NewStyle().Foreground(lipgloss.Color("240")).Render(xAxis))
	
	// –ü–æ–¥–ø–∏—Å–∏ –∫ X-–æ—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	if len(c.Data) > 1 {
		xLabels := fmt.Sprintf("     0%s%d", strings.Repeat(" ", c.Width-10), len(c.Data)-1)
		lines = append(lines, lipgloss.NewStyle().Foreground(lipgloss.Color("240")).Render(xLabels))
	}
	
	return lines
}

// renderEmpty —Ä–µ–Ω–¥–µ—Ä–∏—Ç –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫
func (c *Chart) renderEmpty() string {
	emptyMsg := "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
	style := lipgloss.NewStyle().
		Foreground(lipgloss.Color("240")).
		Align(lipgloss.Center).
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("240")).
		Width(c.Width).
		Height(c.Height)
	
	return style.Render(emptyMsg)
}

// BatteryChart —Å–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
func NewBatteryChart(width, height int) *Chart {
	chart := NewChart("‚ö° –ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏ (%)", width, height)
	chart.Color = lipgloss.Color("46") // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
	// –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∑–∞—Ä—è–¥–∞ –æ—Ç 0 –¥–æ 100
	chart.MinValue = 0
	chart.MaxValue = 100
	chart.FixedRange = true
	return chart
}

// CapacityChart —Å–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –µ–º–∫–æ—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–∏
func NewCapacityChart(width, height int) *Chart {
	chart := NewChart("üîã –ï–º–∫–æ—Å—Ç—å (–º–ê—á)", width, height)
	chart.Color = lipgloss.Color("39") // –°–∏–Ω–∏–π —Ü–≤–µ—Ç
	// –ù–µ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω, —á—Ç–æ–±—ã –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–ª—Å—è –ø–æ–¥ –¥–∞–Ω–Ω—ã–µ
	chart.FixedRange = false
	return chart
}

// TemperatureChart —Å–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
func NewTemperatureChart(width, height int) *Chart {
	chart := NewChart("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", width, height)
	chart.Color = lipgloss.Color("196") // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
	return chart
}

// Sparkline —Å–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ (—Å–ø–∞—Ä–∫–ª–∞–π–Ω)
type Sparkline struct {
	Data  []float64
	Width int
	Color lipgloss.Color
}

// NewSparkline —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∞—Ä–∫–ª–∞–π–Ω
func NewSparkline(width int) *Sparkline {
	return &Sparkline{
		Width: width,
		Color: lipgloss.Color("39"),
		Data:  make([]float64, 0),
	}
}

// SetData —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∞—Ä–∫–ª–∞–π–Ω–∞
func (s *Sparkline) SetData(data []float64) {
	s.Data = make([]float64, len(data))
	copy(s.Data, data)
}

// SetWidth —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è —Å–ø–∞—Ä–∫–ª–∞–π–Ω–∞
func (s *Sparkline) SetWidth(width int) {
	if width > 0 {
		s.Width = width
	}
}

// Render —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Å–ø–∞—Ä–∫–ª–∞–π–Ω
func (s *Sparkline) Render() string {
	if len(s.Data) == 0 {
		return strings.Repeat("‚îÄ", s.Width)
	}
	
	// –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ø–∞—Ä–∫–ª–∞–π–Ω–∞
	sparkChars := []string{"‚ñÅ", "‚ñÇ", "‚ñÉ", "‚ñÑ", "‚ñÖ", "‚ñÜ", "‚ñá", "‚ñà"}
	
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω—É–∂–Ω—É—é —à–∏—Ä–∏–Ω—É
	data := s.prepareDataForWidth(s.Width)
	
	// –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω –∏ –º–∞–∫—Å
	minVal, maxVal := data[0], data[0]
	for _, v := range data {
		if v < minVal {
			minVal = v
		}
		if v > maxVal {
			maxVal = v
		}
	}
	
	result := ""
	for _, value := range data {
		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
		var normalized float64
		if maxVal == minVal {
			normalized = 0.5
		} else {
			normalized = (value - minVal) / (maxVal - minVal)
		}
		
		// –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª
		charIndex := int(normalized * float64(len(sparkChars)-1))
		if charIndex >= len(sparkChars) {
			charIndex = len(sparkChars) - 1
		}
		if charIndex < 0 {
			charIndex = 0
		}
		
		char := sparkChars[charIndex]
		result += lipgloss.NewStyle().Foreground(s.Color).Render(char)
	}
	
	return result
}

// prepareDataForWidth –¥–ª—è —Å–ø–∞—Ä–∫–ª–∞–π–Ω–∞
func (s *Sparkline) prepareDataForWidth(targetWidth int) []float64 {
	if len(s.Data) == 0 {
		return make([]float64, targetWidth)
	}
	
	if len(s.Data) == targetWidth {
		return s.Data
	}
	
	result := make([]float64, targetWidth)
	
	if len(s.Data) < targetWidth {
		// –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		for i := 0; i < targetWidth; i++ {
			sourceIndex := float64(i) * float64(len(s.Data)-1) / float64(targetWidth-1)
			leftIndex := int(sourceIndex)
			rightIndex := leftIndex + 1
			
			if rightIndex >= len(s.Data) {
				result[i] = s.Data[leftIndex]
			} else {
				t := sourceIndex - float64(leftIndex)
				result[i] = s.Data[leftIndex]*(1-t) + s.Data[rightIndex]*t
			}
		}
	} else {
		// –°–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		step := float64(len(s.Data)) / float64(targetWidth)
		for i := 0; i < targetWidth; i++ {
			start := int(float64(i) * step)
			end := int(float64(i+1) * step)
			if end > len(s.Data) {
				end = len(s.Data)
			}
			
			sum := 0.0
			count := 0
			for j := start; j < end; j++ {
				sum += s.Data[j]
				count++
			}
			
			if count > 0 {
				result[i] = sum / float64(count)
			}
		}
	}
	
	return result
}