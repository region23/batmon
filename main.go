// main.go
//
// –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ batmon ‚Äì –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ MacBook (Apple‚ÄØSilicon).
// –°—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ SQLite –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á—ë—Ç.

package main

import (
	"bufio"
	"bytes"
	"context"
	"fmt"
	"html/template"
	"log"
	"math"
	"os"
	"os/exec"
	"os/signal"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/fatih/color"
	ui "github.com/gizak/termui/v3"
	"github.com/gizak/termui/v3/widgets"
	"github.com/jmoiron/sqlx"
	_ "github.com/mattn/go-sqlite3"
)

const (
	dbFile           = "batmon.sqlite"  // –∏–º—è —Ñ–∞–π–ª–∞ SQLite
	pmsetInterval    = 30 * time.Second // –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ pmset
	profilerInterval = 2 * time.Minute  // –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ system_profiler
)

// TrendAnalysis —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
type TrendAnalysis struct {
	DegradationRate   float64 // –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –≤ –º–µ—Å—è—Ü
	ProjectedLifetime int     // –ø—Ä–æ–≥–Ω–æ–∑ –≤ –¥–Ω—è—Ö –¥–æ 80% –µ–º–∫–æ—Å—Ç–∏
	IsHealthy         bool    // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –Ω–æ—Ä–º–µ
}

// ChargeCycle –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª –∑–∞—Ä—è–¥–∞-—Ä–∞–∑—Ä—è–¥–∞
type ChargeCycle struct {
	StartTime    time.Time
	EndTime      time.Time
	StartPercent int
	EndPercent   int
	CycleType    string // "discharge", "charge", "full_cycle"
	CapacityLoss int    // –ø–æ—Ç–µ—Ä—è –µ–º–∫–æ—Å—Ç–∏ –∑–∞ —Ü–∏–∫–ª
}

// DataCollector —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
type DataCollector struct {
	db               *sqlx.DB
	buffer           *MemoryBuffer
	retention        *DataRetention
	lastProfilerCall time.Time
	pmsetInterval    time.Duration
	profilerInterval time.Duration
}

// ReportData —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
type ReportData struct {
	GeneratedAt     time.Time
	Latest          Measurement
	Measurements    []Measurement
	HealthAnalysis  map[string]interface{}
	Wear            float64
	AvgRate         float64
	RobustRate      float64
	ValidIntervals  int
	RemainingTime   time.Duration
	Anomalies       []string
	Recommendations []string
}

// MemoryBuffer - –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
type MemoryBuffer struct {
	measurements    []Measurement
	maxSize         int
	mu              sync.RWMutex
	lastCleanup     time.Time
	cleanupInterval time.Duration
}

// NewMemoryBuffer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏
func NewMemoryBuffer(maxSize int) *MemoryBuffer {
	return &MemoryBuffer{
		measurements:    make([]Measurement, 0, maxSize),
		maxSize:         maxSize,
		lastCleanup:     time.Now(),
		cleanupInterval: 24 * time.Hour, // –û—á–∏—Å—Ç–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
	}
}

// Add –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
func (mb *MemoryBuffer) Add(m Measurement) {
	mb.mu.Lock()
	defer mb.mu.Unlock()

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
	mb.measurements = append(mb.measurements, m)

	// –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
	if len(mb.measurements) > mb.maxSize {
		// –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
		keepFrom := len(mb.measurements) - mb.maxSize + mb.maxSize/4
		mb.measurements = mb.measurements[keepFrom:]
	}
}

// GetLast –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞
func (mb *MemoryBuffer) GetLast(n int) []Measurement {
	mb.mu.RLock()
	defer mb.mu.RUnlock()

	if len(mb.measurements) == 0 {
		return nil
	}

	if n >= len(mb.measurements) {
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –≤—Å–µ—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
		result := make([]Measurement, len(mb.measurements))
		copy(result, mb.measurements)
		return result
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö n –∏–∑–º–µ—Ä–µ–Ω–∏–π
	start := len(mb.measurements) - n
	result := make([]Measurement, n)
	copy(result, mb.measurements[start:])
	return result
}

// GetLatest –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
func (mb *MemoryBuffer) GetLatest() *Measurement {
	mb.mu.RLock()
	defer mb.mu.RUnlock()

	if len(mb.measurements) == 0 {
		return nil
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
	latest := mb.measurements[len(mb.measurements)-1]
	return &latest
}

// Size –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
func (mb *MemoryBuffer) Size() int {
	mb.mu.RLock()
	defer mb.mu.RUnlock()
	return len(mb.measurements)
}

// LoadFromDB –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä
func (mb *MemoryBuffer) LoadFromDB(db *sqlx.DB, count int) error {
	measurements, err := getLastNMeasurements(db, count)
	if err != nil {
		return fmt.Errorf("–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î: %w", err)
	}

	mb.mu.Lock()
	defer mb.mu.Unlock()

	mb.measurements = measurements
	return nil
}

// shouldCleanup –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// DataRetention —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ç–µ–Ω—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
type DataRetention struct {
	db              *sqlx.DB
	retentionPeriod time.Duration
	lastCleanup     time.Time
	cleanupInterval time.Duration
}

// NewDataRetention —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Ç–µ–Ω—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
func NewDataRetention(db *sqlx.DB, retentionPeriod time.Duration) *DataRetention {
	return &DataRetention{
		db:              db,
		retentionPeriod: retentionPeriod,
		lastCleanup:     time.Now(),
		cleanupInterval: 6 * time.Hour, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
	}
}

// Cleanup —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
func (dr *DataRetention) Cleanup() error {
	if time.Since(dr.lastCleanup) < dr.cleanupInterval {
		return nil // –ï—â–µ —Ä–∞–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
	}

	cutoffTime := time.Now().Add(-dr.retentionPeriod)

	result, err := dr.db.Exec(`
		DELETE FROM measurements 
		WHERE timestamp < ?
	`, cutoffTime.Format(time.RFC3339))

	if err != nil {
		return fmt.Errorf("–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	rowsAffected, _ := result.RowsAffected()
	if rowsAffected > 0 {
		log.Printf("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ %d —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ %v)", rowsAffected, dr.retentionPeriod)

		// –í—ã–ø–æ–ª–Ω—è–µ–º VACUUM –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞
		_, err = dr.db.Exec("VACUUM")
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ VACUUM: %v", err)
		}
	}

	dr.lastCleanup = time.Now()
	return nil
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º –≤ –ë–î
func (dr *DataRetention) GetStats() (map[string]interface{}, error) {
	var stats map[string]interface{} = make(map[string]interface{})

	// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
	var totalCount int
	err := dr.db.Get(&totalCount, "SELECT COUNT(*) FROM measurements")
	if err != nil {
		return nil, fmt.Errorf("–ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π: %w", err)
	}
	stats["total_records"] = totalCount

	// –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
	var oldestDate, newestDate string
	err = dr.db.Get(&oldestDate, "SELECT MIN(timestamp) FROM measurements")
	if err == nil {
		stats["oldest_record"] = oldestDate
	}

	err = dr.db.Get(&newestDate, "SELECT MAX(timestamp) FROM measurements")
	if err == nil {
		stats["newest_record"] = newestDate
	}

	// –†–∞–∑–º–µ—Ä –ë–î —Ñ–∞–π–ª–∞
	if dbFileInfo, err := os.Stat(dbFile); err == nil {
		stats["db_size_mb"] = float64(dbFileInfo.Size()) / (1024 * 1024)
	}

	return stats, nil
}

// analyzeAdvancedMetrics –ø—Ä–æ–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –±–∞—Ç–∞—Ä–µ–∏
func analyzeAdvancedMetrics(measurements []Measurement) AdvancedMetrics {
	if len(measurements) == 0 {
		return AdvancedMetrics{}
	}

	var metrics AdvancedMetrics
	latest := measurements[len(measurements)-1]

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
	voltages := make([]float64, 0)
	powers := make([]float64, 0)
	chargingEfficiencies := make([]float64, 0)

	for _, m := range measurements {
		if m.Voltage > 0 {
			voltages = append(voltages, float64(m.Voltage))
		}
		if m.Power != 0 {
			powers = append(powers, float64(m.Power))
		}

		// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏ (–µ–º–∫–æ—Å—Ç—å / –º–æ—â–Ω–æ—Å—Ç—å)
		if m.Power > 0 && m.CurrentCapacity > 0 {
			efficiency := float64(m.CurrentCapacity) / float64(m.Power)
			chargingEfficiencies = append(chargingEfficiencies, efficiency)
		}
	}

	// –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏)
	if len(voltages) > 1 {
		mean := 0.0
		for _, v := range voltages {
			mean += v
		}
		mean /= float64(len(voltages))

		variance := 0.0
		for _, v := range voltages {
			variance += (v - mean) * (v - mean)
		}
		variance /= float64(len(voltages))
		stdDev := math.Sqrt(variance)

		if mean > 0 {
			metrics.VoltageStability = 100 * (1 - stdDev/mean) // –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		}
	}

	// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
	if len(powers) > 0 {
		avgPower := 0.0
		for _, p := range powers {
			avgPower += math.Abs(p) // –ë–µ—Ä–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É
		}
		avgPower /= float64(len(powers))

		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–º–µ–Ω—å—à–µ –º–æ—â–Ω–æ—Å—Ç—å = –≤—ã—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
		if avgPower > 0 {
			metrics.PowerEfficiency = math.Max(0, 100-avgPower/100)
		}
	}

	// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏
	if len(chargingEfficiencies) > 0 {
		avgEfficiency := 0.0
		for _, e := range chargingEfficiencies {
			avgEfficiency += e
		}
		metrics.ChargingEfficiency = avgEfficiency / float64(len(chargingEfficiencies))
	}

	// –¢—Ä–µ–Ω–¥ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
	if len(powers) >= 3 {
		recent := powers[len(powers)-3:]
		trend := "—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ"

		if len(recent) == 3 {
			if recent[2] > recent[1] && recent[1] > recent[0] {
				trend = "—Ä–∞—Å—Ç—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"
			} else if recent[2] < recent[1] && recent[1] < recent[0] {
				trend = "—Å–Ω–∏–∂–∞—é—â–µ–µ—Å—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"
			}
		}
		metrics.PowerTrend = trend
	}

	// –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
	healthScore := 100

	// –°–Ω–∏–∂–∞–µ–º –∑–∞ –∏–∑–Ω–æ—Å
	if latest.DesignCapacity > 0 {
		wear := float64(latest.DesignCapacity-latest.FullChargeCap) / float64(latest.DesignCapacity) * 100
		healthScore -= int(wear * 0.5) // –ò–∑–Ω–æ—Å –≤–ª–∏—è–µ—Ç –Ω–∞ 50%
	}

	// –°–Ω–∏–∂–∞–µ–º –∑–∞ —Ü–∏–∫–ª—ã
	cycleImpact := latest.CycleCount / 10 // –ö–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤ = -1 –±–∞–ª–ª
	healthScore -= cycleImpact

	// –°–Ω–∏–∂–∞–µ–º –∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
	if latest.Temperature > 45 {
		healthScore -= (latest.Temperature - 45) // –ö–∞–∂–¥—ã–π –≥—Ä–∞–¥—É—Å —Å–≤—ã—à–µ 45¬∞C = -1 –±–∞–ª–ª
	}

	// –£—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
	if metrics.VoltageStability < 95 {
		healthScore -= int(95 - metrics.VoltageStability)
	}

	metrics.HealthRating = int(math.Max(0, float64(healthScore)))

	// –°—Ç–∞—Ç—É—Å –æ—Ç Apple
	metrics.AppleStatus = latest.AppleCondition
	if metrics.AppleStatus == "" {
		if metrics.HealthRating >= 85 {
			metrics.AppleStatus = "Normal"
		} else if metrics.HealthRating >= 70 {
			metrics.AppleStatus = "Service Recommended"
		} else {
			metrics.AppleStatus = "Replace Soon"
		}
	}

	return metrics
}

// Measurement ‚Äì –∑–∞–ø–∏—Å—å –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–∏.
type Measurement struct {
	ID              int    `db:"id"`
	Timestamp       string `db:"timestamp"`   // ISO‚Äë8601 UTC
	Percentage      int    `db:"percentage"`  // % –∑–∞—Ä—è–¥–∞
	State           string `db:"state"`       // charging / discharging
	CycleCount      int    `db:"cycle_count"` // –∫–æ–ª-–≤–æ —Ü–∏–∫–ª–æ–≤
	FullChargeCap   int    `db:"full_charge_capacity"`
	DesignCapacity  int    `db:"design_capacity"`
	CurrentCapacity int    `db:"current_capacity"`
	Temperature     int    `db:"temperature"` // —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–∞—Ç–∞—Ä–µ–∏ –≤ ¬∞C
	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≠—Ç–∞–ø 6)
	Voltage        int    `db:"voltage"`         // –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –º–í
	Amperage       int    `db:"amperage"`        // –¢–æ–∫ –≤ –º–ê (+ –∑–∞—Ä—è–¥, - —Ä–∞–∑—Ä—è–¥)
	Power          int    `db:"power"`           // –ú–æ—â–Ω–æ—Å—Ç—å –≤ –º–í—Ç
	AppleCondition string `db:"apple_condition"` // –°—Ç–∞—Ç—É—Å –æ—Ç Apple
}

// AdvancedMetrics —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
type AdvancedMetrics struct {
	PowerEfficiency    float64 `json:"power_efficiency"`    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
	VoltageStability   float64 `json:"voltage_stability"`   // –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
	ChargingEfficiency float64 `json:"charging_efficiency"` // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏
	PowerTrend         string  `json:"power_trend"`         // –¢—Ä–µ–Ω–¥ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
	HealthRating       int     `json:"health_rating"`       // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è (0-100)
	AppleStatus        string  `json:"apple_status"`        // –°—Ç–∞—Ç—É—Å –æ—Ç Apple (Normal, Replace Soon, etc.)
}

// initDB –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∏ —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.
func initDB(path string) (*sqlx.DB, error) {
	db, err := sqlx.Connect("sqlite3", path)
	if err != nil {
		return nil, fmt.Errorf("—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î: %w", err)
	}

	// –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —á—Ç–µ–Ω–∏–∏/–∑–∞–ø–∏—Å–∏
	if _, err := db.Exec("PRAGMA journal_mode=WAL"); err != nil {
		log.Printf("–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å WAL —Ä–µ–∂–∏–º: %v", err)
	}

	schema := `CREATE TABLE IF NOT EXISTS measurements (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		timestamp TEXT NOT NULL,
		percentage INTEGER,
		state TEXT,
		cycle_count INTEGER,
		full_charge_capacity INTEGER,
		design_capacity INTEGER,
		current_capacity INTEGER,
		temperature INTEGER DEFAULT 0,
		voltage INTEGER DEFAULT 0,
		amperage INTEGER DEFAULT 0,
		power INTEGER DEFAULT 0,
		apple_condition TEXT DEFAULT ''
	);`
	if _, err = db.Exec(schema); err != nil {
		return nil, fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: %w", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã)
	alterQueries := []string{
		"ALTER TABLE measurements ADD COLUMN voltage INTEGER DEFAULT 0",
		"ALTER TABLE measurements ADD COLUMN amperage INTEGER DEFAULT 0",
		"ALTER TABLE measurements ADD COLUMN power INTEGER DEFAULT 0",
		"ALTER TABLE measurements ADD COLUMN apple_condition TEXT DEFAULT ''",
	}

	for _, query := range alterQueries {
		db.Exec(query) // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Å—Ç–æ–ª–±—Ü—ã –º–æ–≥—É—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
	}

	return db, nil
}

// parsePMSet –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Ä—è–¥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –∏–∑ pmset.
func parsePMSet() (int, string, error) {
	cmd := exec.Command("pmset", "-g", "batt")
	out, err := cmd.Output()
	if err != nil {
		return 0, "", fmt.Errorf("pmset: %w", err)
	}
	scanner := bufio.NewScanner(bytes.NewReader(out))
	re := regexp.MustCompile(`(\d+)%\s*;\s*(\w+)`)
	for scanner.Scan() {
		line := scanner.Text()
		m := re.FindStringSubmatch(line)
		if len(m) == 3 {
			pct, _ := strconv.Atoi(m[1])
			state := strings.ToLower(m[2])
			return pct, state, nil
		}
	}
	if err = scanner.Err(); err != nil {
		return 0, "", fmt.Errorf("—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ pmset: %w", err)
	}
	return 0, "", fmt.Errorf("–¥–∞–Ω–Ω—ã–µ –æ –±–∞—Ç–∞—Ä–µ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
}

// parseSystemProfiler –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ system_profiler.
// –ù–∞ Apple Silicon –º–Ω–æ–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å
func parseSystemProfiler() (cycle, fullCap, designCap, currCap, temperature, voltage, amperage int, condition string, err error) {
	cmd := exec.Command("system_profiler", "SPPowerDataType", "-detailLevel", "full")
	out, cmdErr := cmd.Output()
	if cmdErr != nil {
		return 0, 0, 0, 0, 0, 0, 0, "", fmt.Errorf("system_profiler: %w", cmdErr)
	}
	scanner := bufio.NewScanner(bytes.NewReader(out))

	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		switch {
		case strings.HasPrefix(line, "Cycle Count:"):
			val := strings.TrimSpace(strings.TrimPrefix(line, "Cycle Count:"))
			cycle, _ = strconv.Atoi(val)
		case strings.HasPrefix(line, "Condition:"):
			condition = strings.TrimSpace(strings.TrimPrefix(line, "Condition:"))
		}
	}
	if scanErr := scanner.Err(); scanErr != nil {
		return 0, 0, 0, 0, 0, 0, 0, "", fmt.Errorf("—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ system_profiler: %w", scanErr)
	}
	return cycle, fullCap, designCap, currCap, temperature, voltage, amperage, condition, nil
}

// parseIORegistry –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞—Ç–∞—Ä–µ–µ –∏–∑ ioreg
func parseIORegistry() (cycle, fullCap, designCap, currCap, temperature, voltage, amperage int, condition string, err error) {
	cmd := exec.Command("ioreg", "-rn", "AppleSmartBattery")
	out, cmdErr := cmd.Output()
	if cmdErr != nil {
		return 0, 0, 0, 0, 0, 0, 0, "", fmt.Errorf("ioreg: %w", cmdErr)
	}

	scanner := bufio.NewScanner(bytes.NewReader(out))
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())

		// –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "ParameterName" = Value
		if strings.Contains(line, " = ") {
			parts := strings.SplitN(line, " = ", 2)
			if len(parts) != 2 {
				continue
			}

			key := strings.Trim(parts[0], `"`)
			value := strings.TrimSpace(parts[1])

			switch key {
			case "CycleCount":
				cycle, _ = strconv.Atoi(value)
			case "AppleRawMaxCapacity":
				fullCap, _ = strconv.Atoi(value)
			case "DesignCapacity":
				designCap, _ = strconv.Atoi(value)
			case "AppleRawCurrentCapacity":
				currCap, _ = strconv.Atoi(value)
			case "Temperature":
				// –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Å–æ—Ç—ã—Ö –¥–æ–ª—è—Ö –≥—Ä–∞–¥—É—Å–∞
				if temp, err := strconv.Atoi(value); err == nil {
					temperature = temp / 100
				}
			case "Voltage":
				voltage, _ = strconv.Atoi(value)
			case "Amperage":
				// Amperage –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º uint64, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
				if amp, err := strconv.ParseUint(value, 10, 64); err == nil {
					if amp > 9223372036854775807 { // –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ int64
						// –≠—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–∞–∫ uint64
						amperage = int(int64(amp))
					} else {
						amperage = int(amp)
					}
				}
			}
		}
	}

	if scanErr := scanner.Err(); scanErr != nil {
		return 0, 0, 0, 0, 0, 0, 0, "", fmt.Errorf("—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ioreg: %w", scanErr)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ –∏–∑ system_profiler
	spCycle, _, _, _, _, _, _, spCondition, spErr := parseSystemProfiler()
	if spErr == nil {
		condition = spCondition
		if cycle == 0 {
			cycle = spCycle
		}
	}

	return cycle, fullCap, designCap, currCap, temperature, voltage, amperage, condition, nil
}

// insertMeasurement —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç Measurement –≤ –ë–î.
func insertMeasurement(db *sqlx.DB, m *Measurement) error {
	query := `INSERT INTO measurements (
		timestamp, percentage, state, cycle_count,
		full_charge_capacity, design_capacity, current_capacity, temperature,
		voltage, amperage, power, apple_condition)
	VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`
	_, err := db.Exec(query,
		m.Timestamp, m.Percentage, m.State, m.CycleCount,
		m.FullChargeCap, m.DesignCapacity, m.CurrentCapacity, m.Temperature,
		m.Voltage, m.Amperage, m.Power, m.AppleCondition)
	return err
}

// getLastNMeasurements –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
func getLastNMeasurements(db *sqlx.DB, n int) ([]Measurement, error) {
	var ms []Measurement
	query := `SELECT * FROM measurements ORDER BY timestamp DESC LIMIT ?`
	if err := db.Select(&ms, query, n); err != nil {
		return nil, err
	}
	// –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
	for i, j := 0, len(ms)-1; i < j; i, j = i+1, j-1 {
		ms[i], ms[j] = ms[j], ms[i]
	}
	return ms, nil
}

// computeAvgRate –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä—è–¥–∫–∏ (–º–ê—á/—á–∞—Å) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ n –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
func computeAvgRate(ms []Measurement, intervals int) float64 {
	if len(ms) < 2 {
		return 0
	}
	start := len(ms) - intervals - 1
	if start < 0 {
		start = 0
	}

	var totalDiff, totalTime float64
	for i := start; i < len(ms)-1; i++ {
		diff := float64(ms[i].CurrentCapacity - ms[i+1].CurrentCapacity)
		if diff <= 0 { // –∑–∞—Ä—è–¥–∫–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			continue
		}
		t1, err1 := time.Parse(time.RFC3339, ms[i].Timestamp)
		t2, err2 := time.Parse(time.RFC3339, ms[i+1].Timestamp)
		if err1 != nil || err2 != nil {
			continue
		}
		timeH := t2.Sub(t1).Hours()
		totalDiff += diff
		totalTime += timeH
	}
	if totalTime == 0 {
		return 0
	}
	return totalDiff / totalTime
}

// computeRemainingTime –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ nanoseconds.
func computeRemainingTime(currentCap int, avgRate float64) time.Duration {
	if avgRate <= 0 {
		return 0
	}
	hours := float64(currentCap) / avgRate
	return time.Duration(hours * float64(time.Hour))
}

// computeWear —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–Ω–æ—Å–∞ –±–∞—Ç–∞—Ä–µ–∏.
func computeWear(designCap, fullCap int) float64 {
	if designCap == 0 {
		return 0
	}
	return float64(designCap-fullCap) / float64(designCap) * 100.0
}

// detectBatteryAnomalies –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ä—è–¥–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
func detectBatteryAnomalies(ms []Measurement) []string {
	if len(ms) < 2 {
		return nil
	}

	var anomalies []string

	for i := 0; i < len(ms)-1; i++ {
		prev := ms[i]
		curr := ms[i+1]

		// –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
		prevTime, err1 := time.Parse(time.RFC3339, prev.Timestamp)
		currTime, err2 := time.Parse(time.RFC3339, curr.Timestamp)
		var interval time.Duration = 30 * time.Second // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if err1 == nil && err2 == nil {
			interval = currTime.Sub(prevTime)
		}

		// –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
		chargeThreshold, capacityThreshold := normalizeAnomalyThresholds(interval)

		// –†–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫ –∑–∞—Ä—è–¥–∞
		chargeDiff := curr.Percentage - prev.Percentage
		if chargeDiff > chargeThreshold {
			anomalies = append(anomalies, fmt.Sprintf("–†–µ–∑–∫–∏–π —Ä–æ—Å—Ç –∑–∞—Ä—è–¥–∞: %d%% ‚Üí %d%% –∑–∞ %.1f –º–∏–Ω (%s)",
				prev.Percentage, curr.Percentage, interval.Minutes(), curr.Timestamp[11:19]))
		}

		// –†–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∑–∞—Ä—è–¥–∞
		if chargeDiff < -chargeThreshold {
			anomalies = append(anomalies, fmt.Sprintf("–†–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∑–∞—Ä—è–¥–∞: %d%% ‚Üí %d%% –∑–∞ %.1f –º–∏–Ω (%s)",
				prev.Percentage, curr.Percentage, interval.Minutes(), curr.Timestamp[11:19]))
		}

		// –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		if prev.State != curr.State {
			anomalies = append(anomalies, fmt.Sprintf("–°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %s ‚Üí %s (%s)",
				prev.State, curr.State, curr.Timestamp[11:19]))
		}

		// –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–º–∫–æ—Å—Ç–∏
		capacityDiff := abs(curr.CurrentCapacity - prev.CurrentCapacity)
		if capacityDiff > capacityThreshold {
			anomalies = append(anomalies, fmt.Sprintf("–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–º–∫–æ—Å—Ç–∏: %d ‚Üí %d –º–ê—á –∑–∞ %.1f –º–∏–Ω (%s)",
				prev.CurrentCapacity, curr.CurrentCapacity, interval.Minutes(), curr.Timestamp[11:19]))
		}
	}

	return anomalies
}

// computeAvgRateRobust –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∞–Ω–æ–º–∞–ª–∏–π
func computeAvgRateRobust(ms []Measurement, intervals int) (float64, int) {
	if len(ms) < 2 {
		return 0, 0
	}
	start := len(ms) - intervals - 1
	if start < 0 {
		start = 0
	}

	var totalDiff, totalTime float64
	validIntervals := 0

	for i := start; i < len(ms)-1; i++ {
		prev := ms[i]
		curr := ms[i+1]

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
		chargeDiff := abs(curr.Percentage - prev.Percentage)
		capacityDiff := abs(curr.CurrentCapacity - prev.CurrentCapacity)

		// –ï—Å–ª–∏ —Ä–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—Ä—è–¥–∞ –∏–ª–∏ –µ–º–∫–æ—Å—Ç–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
		if chargeDiff > 20 || capacityDiff > 500 {
			continue
		}

		diff := float64(prev.CurrentCapacity - curr.CurrentCapacity)
		if diff <= 0 { // –∑–∞—Ä—è–¥–∫–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			continue
		}

		t1, err1 := time.Parse(time.RFC3339, prev.Timestamp)
		t2, err2 := time.Parse(time.RFC3339, curr.Timestamp)
		if err1 != nil || err2 != nil {
			continue
		}

		timeH := t2.Sub(t1).Hours()
		if timeH <= 0 || timeH > 2 { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
			continue
		}

		totalDiff += diff
		totalTime += timeH
		validIntervals++
	}

	if totalTime == 0 {
		return 0, validIntervals
	}
	return totalDiff / totalTime, validIntervals
}

// abs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// max –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

// analyzeCapacityTrend –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏
func analyzeCapacityTrend(measurements []Measurement) TrendAnalysis {
	if len(measurements) < 10 {
		return TrendAnalysis{IsHealthy: true} // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	}

	// –ò—â–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —Å system_profiler –¥–∞–Ω–Ω—ã–º–∏
	now := time.Now()
	thirtyDaysAgo := now.AddDate(0, 0, -30)

	var validMeasurements []Measurement
	for _, m := range measurements {
		if t, err := time.Parse(time.RFC3339, m.Timestamp); err == nil {
			if t.After(thirtyDaysAgo) && m.FullChargeCap > 0 && m.DesignCapacity > 0 {
				validMeasurements = append(validMeasurements, m)
			}
		}
	}

	if len(validMeasurements) < 5 {
		return TrendAnalysis{IsHealthy: true} // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
	}

	// –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è —Ç—Ä–µ–Ω–¥–∞ –µ–º–∫–æ—Å—Ç–∏
	first := validMeasurements[0]
	last := validMeasurements[len(validMeasurements)-1]

	firstTime, _ := time.Parse(time.RFC3339, first.Timestamp)
	lastTime, _ := time.Parse(time.RFC3339, last.Timestamp)

	daysDiff := lastTime.Sub(firstTime).Hours() / 24
	if daysDiff < 7 { // –ú–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
		return TrendAnalysis{IsHealthy: true}
	}

	capacityDiff := float64(last.FullChargeCap - first.FullChargeCap)
	dailyDegradation := capacityDiff / daysDiff
	monthlyDegradation := dailyDegradation * 30

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –æ—Ç –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –µ–º–∫–æ—Å—Ç–∏
	monthlyDegradationPercent := (monthlyDegradation / float64(last.DesignCapacity)) * 100

	// –ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ 80% –µ–º–∫–æ—Å—Ç–∏
	currentHealthPercent := (float64(last.FullChargeCap) / float64(last.DesignCapacity)) * 100
	targetHealthPercent := 80.0

	var projectedDays int
	if monthlyDegradationPercent < 0 && currentHealthPercent > targetHealthPercent {
		monthsTo80Percent := (currentHealthPercent - targetHealthPercent) / (-monthlyDegradationPercent)
		projectedDays = int(monthsTo80Percent * 30)
	}

	// –°—á–∏—Ç–∞–µ–º –∑–¥–æ—Ä–æ–≤–æ–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –º–µ–Ω–µ–µ 0.5% –≤ –º–µ—Å—è—Ü
	isHealthy := monthlyDegradationPercent > -0.5

	return TrendAnalysis{
		DegradationRate:   monthlyDegradationPercent,
		ProjectedLifetime: projectedDays,
		IsHealthy:         isHealthy,
	}
}

// detectChargeCycles –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ü–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞-—Ä–∞–∑—Ä—è–¥–∞
func detectChargeCycles(measurements []Measurement) []ChargeCycle {
	if len(measurements) < 3 {
		return nil
	}

	var cycles []ChargeCycle
	var currentCycle *ChargeCycle

	for i, m := range measurements {
		timestamp, err := time.Parse(time.RFC3339, m.Timestamp)
		if err != nil {
			continue
		}

		if i == 0 {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
		}

		prev := measurements[i-1]

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∑–∞—Ä—è–¥/—Ä–∞–∑—Ä—è–¥)
		if prev.State != m.State {
			if currentCycle != nil {
				// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
				currentCycle.EndTime = timestamp
				currentCycle.EndPercent = m.Percentage

				if prev.CurrentCapacity > 0 && m.CurrentCapacity > 0 {
					currentCycle.CapacityLoss = prev.CurrentCapacity - m.CurrentCapacity
				}

				cycles = append(cycles, *currentCycle)
			}

			// –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
			currentCycle = &ChargeCycle{
				StartTime:    timestamp,
				StartPercent: m.Percentage,
				CycleType:    strings.ToLower(m.State),
			}
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
		if currentCycle != nil {
			currentCycle.EndTime = timestamp
			currentCycle.EndPercent = m.Percentage
		}
	}

	// –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª –µ—Å–ª–∏ –µ—Å—Ç—å
	if currentCycle != nil {
		cycles = append(cycles, *currentCycle)
	}

	return cycles
}

// normalizeAnomalyThresholds –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ—Ä–æ–≥–∏ –∞–Ω–æ–º–∞–ª–∏–π –Ω–∞ –≤—Ä–µ–º—è
func normalizeAnomalyThresholds(interval time.Duration) (int, int) {
	// –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è 30-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
	baseChargeThreshold := 20    // –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	baseCapacityThreshold := 500 // –º–ê—á

	// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –º–∏–Ω—É—Ç—É
	minutes := interval.Minutes()
	if minutes < 0.5 {
		minutes = 0.5 // –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
	}

	// –ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, —Ç–µ–º –≤—ã—à–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ—Ä–æ–≥–∏
	normalizedChargeThreshold := int(float64(baseChargeThreshold) * minutes * 2) // 40% –≤ –º–∏–Ω—É—Ç—É
	normalizedCapacityThreshold := int(float64(baseCapacityThreshold) * minutes)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
	if normalizedChargeThreshold > 50 {
		normalizedChargeThreshold = 50
	}
	if normalizedCapacityThreshold > 2000 {
		normalizedCapacityThreshold = 2000
	}

	return normalizedChargeThreshold, normalizedCapacityThreshold
}

// printColoredStatus –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
func printColoredStatus(status string, value interface{}, level string) {
	switch level {
	case "critical":
		color.Red("%s: %v", status, value)
	case "warning":
		color.Yellow("%s: %v", status, value)
	case "good":
		color.Green("%s: %v", status, value)
	case "info":
		color.Cyan("%s: %v", status, value)
	default:
		fmt.Printf("%s: %v\n", status, value)
	}
}

// getStatusLevel –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
func getStatusLevel(wear float64, percentage int, temperature int, healthScore int) string {
	if wear > 30 || percentage < 10 || temperature > 45 || healthScore < 40 {
		return "critical"
	}
	if wear > 20 || percentage < 20 || temperature > 35 || healthScore < 70 {
		return "warning"
	}
	if wear < 10 && percentage > 50 && temperature < 30 && healthScore > 85 {
		return "good"
	}
	return "info"
}

// formatStateWithEmoji –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–∞—Ç–∞—Ä–µ–∏
func formatStateWithEmoji(state string, percentage int) string {
	if state == "" {
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}

	stateLower := strings.ToLower(state)
	stateFormatted := strings.ToUpper(string(stateLower[0])) + stateLower[1:]

	switch stateLower {
	case "charging":
		if percentage >= 90 {
			return "üîã " + stateFormatted + " (–ø–æ—á—Ç–∏ –ø–æ–ª–Ω–∞—è)"
		}
		return "‚ö° " + stateFormatted
	case "discharging":
		if percentage < 20 {
			return "ü™´ " + stateFormatted + " (–Ω–∏–∑–∫–∏–π –∑–∞—Ä—è–¥)"
		} else if percentage < 50 {
			return "üîã " + stateFormatted
		}
		return "üîã " + stateFormatted
	case "charged":
		return "‚úÖ " + stateFormatted
	case "finishing":
		return "üîå " + stateFormatted
	default:
		return stateFormatted
	}
}

// analyzeBatteryHealth –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏
func analyzeBatteryHealth(ms []Measurement) map[string]interface{} {
	if len(ms) == 0 {
		return nil
	}

	latest := ms[len(ms)-1]
	analysis := make(map[string]interface{})

	// –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
	wear := computeWear(latest.DesignCapacity, latest.FullChargeCap)
	analysis["wear_percentage"] = wear
	analysis["cycle_count"] = latest.CycleCount

	// –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
	anomalies := detectBatteryAnomalies(ms)
	analysis["anomalies"] = anomalies
	analysis["anomaly_count"] = len(anomalies)

	// –†–æ–±–∞—Å—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä—è–¥–∫–∏
	avgRate, validIntervals := computeAvgRateRobust(ms, 10)
	analysis["discharge_rate"] = avgRate
	analysis["valid_intervals"] = validIntervals

	// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
	trendAnalysis := analyzeCapacityTrend(ms)
	analysis["trend_analysis"] = trendAnalysis

	// –ê–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞-—Ä–∞–∑—Ä—è–¥–∞
	chargeCycles := detectChargeCycles(ms)
	analysis["charge_cycles"] = chargeCycles

	// –û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞—Ç–∞—Ä–µ–∏
	var healthStatus string
	var healthScore int

	switch {
	case wear < 5 && latest.CycleCount < 300:
		healthStatus = "–û—Ç–ª–∏—á–Ω–æ–µ"
		healthScore = 95
	case wear < 10 && latest.CycleCount < 500:
		healthStatus = "–•–æ—Ä–æ—à–µ–µ"
		healthScore = 85
	case wear < 20 && latest.CycleCount < 800:
		healthStatus = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
		healthScore = 70
	case wear < 30 && latest.CycleCount < 1200:
		healthStatus = "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
		healthScore = 50
	default:
		healthStatus = "–ü–ª–æ—Ö–æ–µ"
		healthScore = 30
	}

	// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–æ–º–∞–ª–∏–π
	if len(anomalies) > 5 {
		healthScore -= 10
		healthStatus += " (–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)"
	}

	// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
	if !trendAnalysis.IsHealthy && trendAnalysis.DegradationRate < -1.0 {
		healthScore -= 15
		healthStatus += " (–±—ã—Å—Ç—Ä–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è)"
	}

	analysis["health_status"] = healthStatus
	analysis["health_score"] = healthScore

	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	var recommendations []string

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–º–µ–Ω–µ
	if wear > 20 {
		recommendations = append(recommendations, "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–º–µ–Ω—É –±–∞—Ç–∞—Ä–µ–∏")
	}

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º
	if len(anomalies) > 3 {
		recommendations = append(recommendations, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è")
	}

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–∏–∫–ª–∞–º
	if latest.CycleCount > 1000 {
		recommendations = append(recommendations, "–ë–∞—Ç–∞—Ä–µ—è –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –∫–æ–Ω—Ü—É –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
	}

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é
	if avgRate > 1000 {
		recommendations = append(recommendations, "–í—ã—Å–æ–∫–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ - –∑–∞–∫—Ä–æ–π—Ç–µ —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
	}

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
	if latest.Temperature > 40 {
		recommendations = append(recommendations, "–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–∞—Ç–∞—Ä–µ–∏ ("+strconv.Itoa(latest.Temperature)+"¬∞C) - –∏–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–∫–∏")
	} else if latest.Temperature > 35 {
		recommendations = append(recommendations, "–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–∞—Ç–∞—Ä–µ–∏ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è")
	}

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º
	if !trendAnalysis.IsHealthy && trendAnalysis.DegradationRate < -0.5 {
		recommendations = append(recommendations, fmt.Sprintf("–ë—ã—Å—Ç—Ä–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏ (%.2f%% –≤ –º–µ—Å—è—Ü) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏", -trendAnalysis.DegradationRate))
	}

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—Ä—è–¥—É
	if latest.State == "charging" && latest.Percentage == 100 {
		recommendations = append(recommendations, "–ù–µ –¥–µ—Ä–∂–∏—Ç–µ –±–∞—Ç–∞—Ä–µ—é –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–∞ 100% –∑–∞—Ä—è–¥–∞")
	}

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ
	if wear > 15 && latest.CycleCount > 500 {
		recommendations = append(recommendations, "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –±–∞—Ç–∞—Ä–µ–∏ (–ø–æ–ª–Ω—ã–π —Ä–∞–∑—Ä—è–¥ –∏ –∑–∞—Ä—è–¥)")
	}

	analysis["recommendations"] = recommendations

	return analysis
}

// exportToMarkdown —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
func exportToMarkdown(data ReportData, filename string) error {
	content := fmt.Sprintf(`# üîã –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ MacBook

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** %s

## üíº –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ

`, data.GeneratedAt.Format("02.01.2006 15:04:05"))

	if data.HealthAnalysis != nil {
		if status, ok := data.HealthAnalysis["health_status"].(string); ok {
			score, _ := data.HealthAnalysis["health_score"].(int)
			content += fmt.Sprintf("- **–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏:** %s (—Ä–µ–π—Ç–∏–Ω–≥ %d/100)\n", status, score)
		}
	}
	content += fmt.Sprintf("- **–¶–∏–∫–ª—ã:** %d\n", data.Latest.CycleCount)
	content += fmt.Sprintf("- **–ò–∑–Ω–æ—Å:** %.1f%%\n", data.Wear)
	if data.RemainingTime > 0 {
		content += fmt.Sprintf("- **–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:** %s\n", data.RemainingTime.Truncate(time.Minute))
	}

	content += fmt.Sprintf(`
## üîã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏

| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |
|----------|----------|
| –í—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è | %s |
| –ó–∞—Ä—è–¥ | %d%% |
| –°–æ—Å—Ç–æ—è–Ω–∏–µ | %s |
| –¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∫–∏ | %d |
| –ü–æ–ª–Ω–∞—è —ë–º–∫–æ—Å—Ç—å | %d –º–ê—á |
| –ü—Ä–æ–µ–∫—Ç–Ω–∞—è —ë–º–∫–æ—Å—Ç—å | %d –º–ê—á |
| –¢–µ–∫—É—â–∞—è —ë–º–∫–æ—Å—Ç—å | %d –º–ê—á |
`,
		data.Latest.Timestamp,
		data.Latest.Percentage,
		formatStateForExport(data.Latest.State, data.Latest.Percentage),
		data.Latest.CycleCount,
		data.Latest.FullChargeCap,
		data.Latest.DesignCapacity,
		data.Latest.CurrentCapacity)

	if data.Latest.Temperature > 0 {
		content += fmt.Sprintf("| –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ | %d¬∞C |\n", data.Latest.Temperature)
	}

	content += "\n## üìä –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è –±–∞—Ç–∞—Ä–µ–∏\n\n"
	if data.HealthAnalysis != nil {
		if status, ok := data.HealthAnalysis["health_status"].(string); ok {
			score, _ := data.HealthAnalysis["health_score"].(int)
			content += fmt.Sprintf("**–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** %s (–æ—Ü–µ–Ω–∫–∞: %d/100)\n\n", status, score)
		}
		content += fmt.Sprintf("**–ò–∑–Ω–æ—Å –±–∞—Ç–∞—Ä–µ–∏:** %.1f%%\n\n", data.Wear)

		// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
		if trendAnalysis, ok := data.HealthAnalysis["trend_analysis"].(TrendAnalysis); ok {
			if trendAnalysis.DegradationRate != 0 {
				content += fmt.Sprintf("**–¢—Ä–µ–Ω–¥ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:** %.2f%% –≤ –º–µ—Å—è—Ü\n\n", trendAnalysis.DegradationRate)
				if trendAnalysis.ProjectedLifetime > 0 {
					content += fmt.Sprintf("**–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ 80%% –µ–º–∫–æ—Å—Ç–∏:** ~%d –¥–Ω–µ–π\n\n", trendAnalysis.ProjectedLifetime)
				}
			}
		}

		if len(data.Anomalies) > 0 {
			content += fmt.Sprintf("### ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ (%d)\n\n", len(data.Anomalies))
			for i, anomaly := range data.Anomalies {
				if i >= 10 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∞–Ω–æ–º–∞–ª–∏–π –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ
					content += fmt.Sprintf("... –∏ –µ—â–µ %d –∞–Ω–æ–º–∞–ª–∏–π\n\n", len(data.Anomalies)-i)
					break
				}
				content += fmt.Sprintf("- %s\n", anomaly)
			}
			content += "\n"
		}

		if len(data.Recommendations) > 0 {
			content += "### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
			for _, rec := range data.Recommendations {
				content += fmt.Sprintf("- %s\n", rec)
			}
			content += "\n"
		}
	}

	content += "## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—Ä—è–¥–∫–∏\n\n"
	if data.AvgRate > 0 {
		content += fmt.Sprintf("- **–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä—è–¥–∫–∏:** %.2f –º–ê—á/—á–∞—Å\n", data.AvgRate)
	}
	if data.RobustRate > 0 {
		content += fmt.Sprintf("- **–†–æ–±–∞—Å—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä—è–¥–∫–∏:** %.2f –º–ê—á/—á–∞—Å (–Ω–∞ –æ—Å–Ω–æ–≤–µ %d –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)\n", data.RobustRate, data.ValidIntervals)
	}
	if data.RemainingTime > 0 {
		content += fmt.Sprintf("- **–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** %s\n", data.RemainingTime.Truncate(time.Minute))
	}

	content += "\n## üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è\n\n"
	content += "| –í—Ä–µ–º—è | –ó–∞—Ä—è–¥ | –°–æ—Å—Ç–æ—è–Ω–∏–µ | –¶–∏–∫–ª | –ü–æ–ª–Ω–∞—è –µ–º–∫. | –ü—Ä–æ–µ–∫—Ç. –µ–º–∫. | –¢–µ–∫—É—â. –µ–º–∫. | –¢–µ–º–ø. |\n"
	content += "|-------|-------|-----------|------|-------------|--------------|-------------|-------|\n"

	startIdx := 0
	if len(data.Measurements) > 15 {
		startIdx = len(data.Measurements) - 15 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ
	}

	for i := startIdx; i < len(data.Measurements); i++ {
		if i < 0 {
			continue
		}
		m := data.Measurements[i]
		timeStr := m.Timestamp[11:19] // —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
		tempStr := "-"
		if m.Temperature > 0 {
			tempStr = fmt.Sprintf("%d¬∞C", m.Temperature)
		}

		content += fmt.Sprintf("| %s | %d%% | %s | %d | %d | %d | %d | %s |\n",
			timeStr, m.Percentage, formatStateForExport(m.State, m.Percentage),
			m.CycleCount, m.FullChargeCap, m.DesignCapacity, m.CurrentCapacity, tempStr)
	}

	content += "\n---\n*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Ç–∏–ª–∏—Ç–æ–π batmon v2.0*\n"

	return os.WriteFile(filename, []byte(content), 0644)
}

// exportToHTML —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
func exportToHTML(data ReportData, filename string) error {
	tmpl := `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üîã –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ MacBook</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif; 
            margin: 40px; 
            background-color: #f5f5f7; 
            color: #1d1d1f;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white; 
            padding: 40px; 
            border-radius: 12px; 
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        .header { 
            text-align: center; 
            margin-bottom: 40px; 
            padding-bottom: 20px;
            border-bottom: 2px solid #e5e5e7;
        }
        .summary { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            color: white; 
            padding: 30px; 
            border-radius: 12px; 
            margin-bottom: 30px; 
        }
        .grid { 
            display: grid; 
            grid-template-columns: 1fr 1fr; 
            gap: 30px; 
            margin-bottom: 30px; 
        }
        .card { 
            background: #f8f9fa; 
            padding: 25px; 
            border-radius: 8px; 
            border: 1px solid #e9ecef;
        }
        .status-good { color: #28a745; font-weight: bold; }
        .status-warning { color: #ffc107; font-weight: bold; }
        .status-critical { color: #dc3545; font-weight: bold; }
        table { 
            width: 100%; 
            border-collapse: collapse; 
            margin-top: 20px; 
        }
        th, td { 
            padding: 12px; 
            text-align: left; 
            border-bottom: 1px solid #ddd; 
        }
        th { 
            background-color: #f8f9fa; 
            font-weight: 600;
        }
        .chart-container { 
            position: relative; 
            height: 400px; 
            margin: 20px 0; 
        }
        .anomaly { 
            background: #fff3cd; 
            border: 1px solid #ffeaa7; 
            padding: 15px; 
            border-radius: 6px; 
            margin: 10px 0; 
        }
        .recommendation { 
            background: #d1edff; 
            border: 1px solid #74b9ff; 
            padding: 15px; 
            border-radius: 6px; 
            margin: 10px 0; 
        }
        .footer { 
            text-align: center; 
            margin-top: 40px; 
            padding-top: 20px; 
            border-top: 1px solid #e5e5e7; 
            color: #86868b; 
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîã –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ MacBook</h1>
            <p>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {{.GeneratedAt.Format "02.01.2006 15:04:05"}}</p>
        </div>

        <div class="summary">
            <h2>üíº –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ</h2>
            {{if .HealthAnalysis}}
                {{if index .HealthAnalysis "health_status"}}
                    <p>üè• <strong>–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏:</strong> {{index .HealthAnalysis "health_status"}} (—Ä–µ–π—Ç–∏–Ω–≥ {{index .HealthAnalysis "health_score"}}/100)</p>
                {{end}}
            {{end}}
            <p>üîÑ <strong>–¶–∏–∫–ª—ã:</strong> {{.Latest.CycleCount}}</p>
            <p>üìâ <strong>–ò–∑–Ω–æ—Å:</strong> {{printf "%.1f" .Wear}}%</p>
            {{if gt .RemainingTime 0}}
                <p>‚è∞ <strong>–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</strong> {{.RemainingTime.Truncate 1000000000}}</p>
            {{end}}
        </div>

        <div class="grid">
            <div class="card">
                <h3>üìä –ì—Ä–∞—Ñ–∏–∫–∏</h3>
                <div class="chart-container">
                    <canvas id="batteryChart"></canvas>
                </div>
                <div class="chart-container">
                    <canvas id="capacityChart"></canvas>
                </div>
            </div>

            <div class="card">
                <h3>üîã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h3>
                <table>
                    <tr><td><strong>–ó–∞—Ä—è–¥</strong></td><td>{{.Latest.Percentage}}%</td></tr>
                    <tr><td><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ</strong></td><td>{{.Latest.State}}</td></tr>
                    <tr><td><strong>–¶–∏–∫–ª—ã</strong></td><td>{{.Latest.CycleCount}}</td></tr>
                    <tr><td><strong>–ü–æ–ª–Ω–∞—è —ë–º–∫–æ—Å—Ç—å</strong></td><td>{{.Latest.FullChargeCap}} –º–ê—á</td></tr>
                    <tr><td><strong>–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —ë–º–∫–æ—Å—Ç—å</strong></td><td>{{.Latest.DesignCapacity}} –º–ê—á</td></tr>
                    <tr><td><strong>–¢–µ–∫—É—â–∞—è —ë–º–∫–æ—Å—Ç—å</strong></td><td>{{.Latest.CurrentCapacity}} –º–ê—á</td></tr>
                    {{if gt .Latest.Temperature 0}}
                        <tr><td><strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</strong></td><td>{{.Latest.Temperature}}¬∞C</td></tr>
                    {{end}}
                </table>
            </div>
        </div>

        {{if .Anomalies}}
        <div class="card">
            <h3>‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ ({{len .Anomalies}})</h3>
            {{range $index, $anomaly := .Anomalies}}
                {{if lt $index 10}}
                    <div class="anomaly">{{$anomaly}}</div>
                {{end}}
            {{end}}
            {{if gt (len .Anomalies) 10}}
                <p>... –∏ –µ—â–µ {{sub (len .Anomalies) 10}} –∞–Ω–æ–º–∞–ª–∏–π</p>
            {{end}}
        </div>
        {{end}}

        {{if .Recommendations}}
        <div class="card">
            <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            {{range .Recommendations}}
                <div class="recommendation">{{.}}</div>
            {{end}}
        </div>
        {{end}}

        <div class="card">
            <h3>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è</h3>
            <table>
                <thead>
                    <tr>
                        <th>–í—Ä–µ–º—è</th>
                        <th>–ó–∞—Ä—è–¥</th>
                        <th>–°–æ—Å—Ç–æ—è–Ω–∏–µ</th>
                        <th>–¶–∏–∫–ª</th>
                        <th>–ü–æ–ª–Ω–∞—è –µ–º–∫.</th>
                        <th>–¢–µ–∫—É—â. –µ–º–∫.</th>
                        <th>–¢–µ–º–ø.</th>
                    </tr>
                </thead>
                <tbody>
                    {{$len := len .Measurements}}
                    {{$start := 0}}
                    {{if gt $len 15}}
                        {{$start = sub $len 15}}
                    {{end}}
                    {{range $index, $m := .Measurements}}
                        {{if ge $index $start}}
                            <tr>
                                <td>{{slice $m.Timestamp 11 19}}</td>
                                <td>{{$m.Percentage}}%</td>
                                <td>{{$m.State}}</td>
                                <td>{{$m.CycleCount}}</td>
                                <td>{{$m.FullChargeCap}} –º–ê—á</td>
                                <td>{{$m.CurrentCapacity}} –º–ê—á</td>
                                <td>{{if gt $m.Temperature 0}}{{$m.Temperature}}¬∞C{{else}}-{{end}}</td>
                            </tr>
                        {{end}}
                    {{end}}
                </tbody>
            </table>
        </div>

        <div class="footer">
            <p><em>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Ç–∏–ª–∏—Ç–æ–π batmon v2.0</em></p>
        </div>
    </div>

    <script>
        // –ì—Ä–∞—Ñ–∏–∫ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
        const batteryCtx = document.getElementById('batteryChart').getContext('2d');
        const batteryData = [
            {{range $index, $m := .Measurements}}
                {{if lt $index 20}}{{$m.Percentage}},{{end}}
            {{end}}
        ];
        
        new Chart(batteryCtx, {
            type: 'line',
            data: {
                labels: [
                    {{range $index, $m := .Measurements}}
                        {{if lt $index 20}}'{{slice $m.Timestamp 11 19}}',{{end}}
                    {{end}}
                ],
                datasets: [{
                    label: '–ó–∞—Ä—è–¥ (%)',
                    data: batteryData,
                    borderColor: '#28a745',
                    backgroundColor: 'rgba(40, 167, 69, 0.1)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: '–ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏ (%)'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100
                    }
                }
            }
        });

        // –ì—Ä–∞—Ñ–∏–∫ –µ–º–∫–æ—Å—Ç–∏
        const capacityCtx = document.getElementById('capacityChart').getContext('2d');
        const capacityData = [
            {{range $index, $m := .Measurements}}
                {{if lt $index 20}}{{$m.CurrentCapacity}},{{end}}
            {{end}}
        ];
        
        new Chart(capacityCtx, {
            type: 'line',
            data: {
                labels: [
                    {{range $index, $m := .Measurements}}
                        {{if lt $index 20}}'{{slice $m.Timestamp 11 19}}',{{end}}
                    {{end}}
                ],
                datasets: [{
                    label: '–ï–º–∫–æ—Å—Ç—å (–º–ê—á)',
                    data: capacityData,
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: '–¢–µ–∫—É—â–∞—è –µ–º–∫–æ—Å—Ç—å (–º–ê—á)'
                    }
                }
            }
        });
    </script>
</body>
</html>`

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
	funcMap := template.FuncMap{
		"sub": func(a, b int) int {
			return a - b
		},
	}

	t, err := template.New("report").Funcs(funcMap).Parse(tmpl)
	if err != nil {
		return fmt.Errorf("–ø–∞—Ä—Å–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞: %w", err)
	}

	file, err := os.Create(filename)
	if err != nil {
		return fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: %w", err)
	}
	defer file.Close()

	return t.Execute(file, data)
}

// formatStateForExport —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–±–µ–∑ —ç–º–æ–¥–∑–∏)
func formatStateForExport(state string, percentage int) string {
	if state == "" {
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}

	stateLower := strings.ToLower(state)
	stateFormatted := strings.ToUpper(string(stateLower[0])) + stateLower[1:]

	switch stateLower {
	case "charging":
		if percentage >= 90 {
			return stateFormatted + " (–ø–æ—á—Ç–∏ –ø–æ–ª–Ω–∞—è)"
		}
		return stateFormatted
	case "discharging":
		if percentage < 20 {
			return stateFormatted + " (–Ω–∏–∑–∫–∏–π –∑–∞—Ä—è–¥)"
		}
		return stateFormatted
	case "charged":
		return stateFormatted
	case "finishing":
		return stateFormatted
	default:
		return stateFormatted
	}
}

// generateReportData —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
func generateReportData(db *sqlx.DB) (ReportData, error) {
	ms, err := getLastNMeasurements(db, 50)
	if err != nil {
		return ReportData{}, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	if len(ms) == 0 {
		return ReportData{}, fmt.Errorf("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
	}

	latest := ms[len(ms)-1]
	avgRate := computeAvgRate(ms, 5)
	robustRate, validIntervals := computeAvgRateRobust(ms, 10)
	remaining := computeRemainingTime(latest.CurrentCapacity, robustRate)
	wear := computeWear(latest.DesignCapacity, latest.FullChargeCap)
	healthAnalysis := analyzeBatteryHealth(ms)

	var anomalies []string
	var recommendations []string

	if healthAnalysis != nil {
		if anomaliesList, ok := healthAnalysis["anomalies"].([]string); ok {
			anomalies = anomaliesList
		}
		if recsList, ok := healthAnalysis["recommendations"].([]string); ok {
			recommendations = recsList
		}
	}

	return ReportData{
		GeneratedAt:     time.Now(),
		Latest:          latest,
		Measurements:    ms,
		HealthAnalysis:  healthAnalysis,
		Wear:            wear,
		AvgRate:         avgRate,
		RobustRate:      robustRate,
		ValidIntervals:  validIntervals,
		RemainingTime:   remaining,
		Anomalies:       anomalies,
		Recommendations: recommendations,
	}, nil
}

// isOnBattery –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç –±–∞—Ç–∞—Ä–µ–∏
func isOnBattery() (bool, string, int, error) {
	pct, state, err := parsePMSet()
	if err != nil {
		return false, "", 0, err
	}

	isOnBatt := strings.ToLower(state) == "discharging" ||
		strings.ToLower(state) == "finishing" ||
		strings.ToLower(state) == "charged"

	return isOnBatt, state, pct, nil
}

// backgroundDataCollection –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —á–∞—Å—Ç–æ—Ç—ã
// NewDataCollector —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
func NewDataCollector(db *sqlx.DB) *DataCollector {
	buffer := NewMemoryBuffer(100)                     // –ë—É—Ñ–µ—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
	retention := NewDataRetention(db, 90*24*time.Hour) // –•—Ä–∞–Ω–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞

	collector := &DataCollector{
		db:               db,
		buffer:           buffer,
		retention:        retention,
		lastProfilerCall: time.Time{},
		pmsetInterval:    30 * time.Second,
		profilerInterval: 2 * time.Minute,
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
	if err := buffer.LoadFromDB(db, 100); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä: %v", err)
	} else {
		log.Printf("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏", buffer.Size())
	}

	return collector
}

// collectAndStore —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î –∏ –±—É—Ñ–µ—Ä
func (dc *DataCollector) collectAndStore() error {
	// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç pmset
	pct, state, pmErr := parsePMSet()
	if pmErr != nil {
		return fmt.Errorf("—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö pmset: %w", pmErr)
	}

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
	m := &Measurement{
		Timestamp:       time.Now().UTC().Format(time.RFC3339),
		Percentage:      pct,
		State:           state,
		CycleCount:      0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏–∂–µ
		FullChargeCap:   0,
		DesignCapacity:  0,
		CurrentCapacity: 0,
		Temperature:     0,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç ioreg, –µ—Å–ª–∏ –ø–æ—Ä–∞
	if time.Since(dc.lastProfilerCall) >= dc.profilerInterval {
		cycle, fullCap, designCap, currCap, temperature, voltage, amperage, condition, ioErr := parseIORegistry()
		if ioErr == nil {
			m.CycleCount = cycle
			m.FullChargeCap = fullCap
			m.DesignCapacity = designCap
			m.CurrentCapacity = currCap
			m.Temperature = temperature
			m.Voltage = voltage
			m.Amperage = amperage
			m.AppleCondition = condition

			// –í—ã—á–∏—Å–ª—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å
			if voltage > 0 && amperage != 0 {
				m.Power = (voltage * amperage) / 1000
			}

			dc.lastProfilerCall = time.Now()
		} else {
			// –ï—Å–ª–∏ ioreg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
			if latest := dc.buffer.GetLatest(); latest != nil {
				m.CycleCount = latest.CycleCount
				m.FullChargeCap = latest.FullChargeCap
				m.DesignCapacity = latest.DesignCapacity
				m.CurrentCapacity = latest.CurrentCapacity
				m.Temperature = latest.Temperature
				m.Voltage = latest.Voltage
				m.Amperage = latest.Amperage
				m.Power = latest.Power
				m.AppleCondition = latest.AppleCondition
			}
			log.Printf("‚ö†Ô∏è ioreg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: %v", ioErr)
		}
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
		if latest := dc.buffer.GetLatest(); latest != nil {
			m.CycleCount = latest.CycleCount
			m.FullChargeCap = latest.FullChargeCap
			m.DesignCapacity = latest.DesignCapacity
			m.CurrentCapacity = latest.CurrentCapacity
			m.Temperature = latest.Temperature
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	if err := insertMeasurement(dc.db, m); err != nil {
		return fmt.Errorf("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: %w", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏
	dc.buffer.Add(*m)

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if err := dc.retention.Cleanup(); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	return nil
}

// GetLatestFromBuffer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ (–±—ã—Å—Ç—Ä–æ)
func (dc *DataCollector) GetLatestFromBuffer() *Measurement {
	return dc.buffer.GetLatest()
}

// GetLastNFromBuffer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞ (–±—ã—Å—Ç—Ä–æ)
func (dc *DataCollector) GetLastNFromBuffer(n int) []Measurement {
	return dc.buffer.GetLast(n)
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º
func (dc *DataCollector) GetStats() (map[string]interface{}, error) {
	dbStats, err := dc.retention.GetStats()
	if err != nil {
		return nil, fmt.Errorf("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: %w", err)
	}

	dbStats["buffer_size"] = dc.buffer.Size()
	dbStats["buffer_max_size"] = dc.buffer.maxSize

	return dbStats, nil
}

// backgroundDataCollection –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
func backgroundDataCollection(db *sqlx.DB, ctx context.Context, wg *sync.WaitGroup) {
	defer wg.Done()

	// –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
	collector := NewDataCollector(db)

	// –î–µ–ª–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
	if err := collector.collectAndStore(); err != nil {
		log.Printf("‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: %v", err)
	}

	ticker := time.NewTicker(collector.pmsetInterval)
	defer ticker.Stop()

	log.Printf("üîÑ –§–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω (pmset: %v, system_profiler: %v)",
		collector.pmsetInterval, collector.profilerInterval)

	for {
		select {
		case <-ctx.Done():
			log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
			return
		case <-ticker.C:
			if err := collector.collectAndStore(); err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: %v", err)
				continue
			}

			// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–æ–≥–¥–∞
			if collector.buffer.Size()%50 == 0 && collector.buffer.Size() > 0 {
				stats, err := collector.GetStats()
				if err == nil {
					log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –±—É—Ñ–µ—Ä %d/%d, –ë–î %v –∑–∞–ø–∏—Å–µ–π",
						stats["buffer_size"], stats["buffer_max_size"], stats["total_records"])
				}
			}

			// –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
			latest := collector.GetLatestFromBuffer()
			if latest != nil {
				if strings.ToLower(latest.State) == "charging" && latest.Percentage >= 100 {
					log.Println("üîã –ë–∞—Ç–∞—Ä–µ—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω–∞, –∑–∞–º–µ–¥–ª—è–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
					ticker.Reset(5 * time.Minute)
				} else if strings.ToLower(latest.State) == "discharging" {
					// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑—Ä—è–¥–∫–µ
					ticker.Reset(collector.pmsetInterval)
				}
			}
		}
	}
}

// normalizeKeyInput –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–≤–æ–¥ –∫–ª–∞–≤–∏—à –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func normalizeKeyInput(keyID string) string {
	// –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–ª–∞–≤–∏—à –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∫–∞—Ö –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
	keyMappings := map[string]string{
		// –†—É—Å—Å–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ (–ô–¶–£–ö–ï–ù)
		"–π": "q", // q -> –π
		"—Ü": "w", // w -> —Ü
		"—É": "e", // e -> —É
		"–∫": "r", // r -> –∫
		"–µ": "t", // t -> –µ
		"–Ω": "y", // y -> –Ω
		"–≥": "u", // u -> –≥
		"—à": "i", // i -> —à
		"—â": "o", // o -> —â
		"–∑": "p", // p -> –∑
		"—Ñ": "a", // a -> —Ñ
		"—ã": "s", // s -> —ã
		"–≤": "d", // d -> –≤
		"–∞": "f", // f -> –∞
		"–ø": "g", // g -> –ø
		"—Ä": "h", // h -> —Ä
		"–æ": "j", // j -> –æ
		"–ª": "k", // k -> –ª
		"–¥": "l", // l -> –¥
		"—è": "z", // z -> —è
		"—á": "x", // x -> —á
		"—Å": "c", // c -> —Å
		"–º": "v", // v -> –º
		"–∏": "b", // b -> –∏
		"—Ç": "n", // n -> —Ç
		"—å": "m", // m -> —å

		// –ù–µ–º–µ—Ü–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ (QWERTZ) - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
		"√º": "y", // –í –Ω–µ–º–µ—Ü–∫–æ–π y –Ω–∞ –º–µ—Å—Ç–µ √º
		"√§": "a", // –∏ —Ç.–¥.
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏
	if normalized, exists := keyMappings[keyID]; exists {
		return normalized
	}

	// –ï—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–ª–∞–≤–∏—à—É
	return keyID
}

// DashboardLayout —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞
type DashboardLayout struct {
	BatteryChart  struct{ X1, Y1, X2, Y2 int }
	CapacityChart struct{ X1, Y1, X2, Y2 int }
	InfoList      struct{ X1, Y1, X2, Y2 int }
	StateGauge    struct{ X1, Y1, X2, Y2 int }
	WearGauge     struct{ X1, Y1, X2, Y2 int }
	Table         struct{ X1, Y1, X2, Y2 int }
}

// calculateLayout –≤—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ª–µ–π–∞—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
func calculateLayout() DashboardLayout {
	termWidth, termHeight := ui.TerminalDimensions()

	var layout DashboardLayout

	// –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ª–µ–π–∞—É—Ç
	if termWidth < 60 || termHeight < 20 {
		// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ª–µ–π–∞—É—Ç–∞
		if termWidth < 40 {
			termWidth = 40
		}
		if termHeight < 15 {
			termHeight = 15
		}

		// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ª–µ–π–∞—É—Ç: —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
		halfHeight := termHeight / 2

		layout.BatteryChart.X1 = 0
		layout.BatteryChart.Y1 = 0
		layout.BatteryChart.X2 = termWidth
		layout.BatteryChart.Y2 = halfHeight

		layout.InfoList.X1 = 0
		layout.InfoList.Y1 = halfHeight
		layout.InfoList.X2 = termWidth
		layout.InfoList.Y2 = termHeight

		// –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã —Å–∫—Ä—ã–≤–∞–µ–º (–Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
		layout.CapacityChart = layout.BatteryChart // –î—É–±–ª–∏—Ä—É–µ–º —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
		layout.StateGauge.X1 = 0
		layout.StateGauge.Y1 = 0
		layout.StateGauge.X2 = 0
		layout.StateGauge.Y2 = 0
		layout.WearGauge.X1 = 0
		layout.WearGauge.Y1 = 0
		layout.WearGauge.X2 = 0
		layout.WearGauge.Y2 = 0
		layout.Table.X1 = 0
		layout.Table.Y1 = 0
		layout.Table.X2 = 0
		layout.Table.Y2 = 0

		return layout
	}

	// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
	if termWidth < 80 {
		termWidth = 80
	}
	if termHeight < 25 {
		termHeight = 25
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
	leftWidth := termWidth / 2
	topHeight := (termHeight * 3) / 5 // 60% –≤—ã—Å–æ—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
	bottomHeight := termHeight - topHeight

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∏–∂–Ω—è—è –æ–±–ª–∞—Å—Ç—å –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
	if bottomHeight < 6 {
		topHeight = termHeight - 6
		bottomHeight = 6
	}

	// –ì—Ä–∞—Ñ–∏–∫ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π)
	layout.BatteryChart.X1 = 0
	layout.BatteryChart.Y1 = 0
	layout.BatteryChart.X2 = leftWidth
	layout.BatteryChart.Y2 = topHeight

	// –ì—Ä–∞—Ñ–∏–∫ —ë–º–∫–æ—Å—Ç–∏ (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π) - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
	layout.CapacityChart.X1 = leftWidth + 1
	layout.CapacityChart.Y1 = 0
	layout.CapacityChart.X2 = termWidth
	layout.CapacityChart.Y2 = topHeight

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π) - —É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –Ω–∞ 1 —Å–∏–º–≤–æ–ª
	layout.InfoList.X1 = 0
	layout.InfoList.Y1 = topHeight
	layout.InfoList.X2 = leftWidth - 1
	layout.InfoList.Y2 = termHeight

	// –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è –æ–±–ª–∞—Å—Ç—å: –ª—É—á—à–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
	gaugeHeight := max(4, bottomHeight/3) // –ú–∏–Ω–∏–º—É–º 4 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ gauge

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –ø–æ–º–µ—â–∞—é—Ç—Å—è
	if gaugeHeight*2+6 > bottomHeight { // 6 = –º–∏–Ω–∏–º—É–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
		gaugeHeight = max(4, (bottomHeight-6)/3) // –°–∂–∏–º–∞–µ–º gauges –µ—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 4
	}

	// –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∑–∞—Ä—è–¥–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
	layout.StateGauge.X1 = leftWidth + 1
	layout.StateGauge.Y1 = topHeight
	layout.StateGauge.X2 = termWidth
	layout.StateGauge.Y2 = topHeight + gaugeHeight

	// –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏–∑–Ω–æ—Å–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
	layout.WearGauge.X1 = leftWidth + 1
	layout.WearGauge.Y1 = topHeight + gaugeHeight
	layout.WearGauge.X2 = termWidth
	layout.WearGauge.Y2 = topHeight + 2*gaugeHeight

	// –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
	layout.Table.X1 = leftWidth + 1
	layout.Table.Y1 = topHeight + 2*gaugeHeight
	layout.Table.X2 = termWidth
	layout.Table.Y2 = termHeight

	return layout
}

// applyLayout –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ª–µ–π–∞—É—Ç –∫ –≤–∏–¥–∂–µ—Ç–∞–º
func applyLayout(layout DashboardLayout, batteryChart, capacityChart *widgets.Plot,
	infoList *widgets.List, stateGauge, wearGauge *widgets.Gauge, table *widgets.Table) {

	// –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
	batteryChart.SetRect(layout.BatteryChart.X1, layout.BatteryChart.Y1,
		layout.BatteryChart.X2, layout.BatteryChart.Y2)
	infoList.SetRect(layout.InfoList.X1, layout.InfoList.Y1,
		layout.InfoList.X2, layout.InfoList.Y2)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–∏—Ö –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã
	if layout.CapacityChart.X2 > layout.CapacityChart.X1 && layout.CapacityChart.Y2 > layout.CapacityChart.Y1 {
		capacityChart.SetRect(layout.CapacityChart.X1, layout.CapacityChart.Y1,
			layout.CapacityChart.X2, layout.CapacityChart.Y2)
	}
	if layout.StateGauge.X2 > layout.StateGauge.X1 && layout.StateGauge.Y2 > layout.StateGauge.Y1 {
		stateGauge.SetRect(layout.StateGauge.X1, layout.StateGauge.Y1,
			layout.StateGauge.X2, layout.StateGauge.Y2)
	}
	if layout.WearGauge.X2 > layout.WearGauge.X1 && layout.WearGauge.Y2 > layout.WearGauge.Y1 {
		wearGauge.SetRect(layout.WearGauge.X1, layout.WearGauge.Y1,
			layout.WearGauge.X2, layout.WearGauge.Y2)
	}
	if layout.Table.X2 > layout.Table.X1 && layout.Table.Y2 > layout.Table.Y1 {
		table.SetRect(layout.Table.X1, layout.Table.Y1,
			layout.Table.X2, layout.Table.Y2)
	}
}

// getDashboardHotkeys –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
func getDashboardHotkeys() []string {
	return []string{
		"",
		"‚ïê‚ïê‚ïê –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò ‚ïê‚ïê‚ïê",
		"‚å®Ô∏è  'q'/'–π' / Ctrl+C - –í—ã—Ö–æ–¥",
		"üîÑ 'r'/'–∫' - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
		"üìä 'h'/'—Ä' - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É",
		"üìà –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 10—Å",
		"üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏",
	}
}

// safeUpdateChartData –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
func safeUpdateChartData(batteryChart, capacityChart *widgets.Plot, measurements []Measurement) {
	if len(measurements) == 0 {
		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		batteryChart.Data[0] = []float64{0, 0}
		capacityChart.Data[0] = []float64{0, 0}
		return
	}

	dataSize := len(measurements)
	if dataSize < 2 {
		// –î—É–±–ª–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
		batteryChart.Data[0] = make([]float64, 2)
		batteryChart.Data[0][0] = float64(measurements[0].Percentage)
		batteryChart.Data[0][1] = float64(measurements[0].Percentage)
		capacityChart.Data[0] = make([]float64, 2)
		capacityChart.Data[0][0] = float64(measurements[0].CurrentCapacity)
		capacityChart.Data[0][1] = float64(measurements[0].CurrentCapacity)
	} else {
		batteryChart.Data[0] = make([]float64, len(measurements))
		capacityChart.Data[0] = make([]float64, len(measurements))
		for i, m := range measurements {
			batteryChart.Data[0][i] = float64(m.Percentage)
			capacityChart.Data[0][i] = float64(m.CurrentCapacity)
		}
	}
}

// showDashboard –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
func showDashboard(db *sqlx.DB, ctx context.Context) error {
	if err := ui.Init(); err != nil {
		return fmt.Errorf("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI: %w", err)
	}
	defer ui.Close()

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∏–∑–º–µ—Ä–µ–Ω–∏–π
	measurements, err := getLastNMeasurements(db, 50)
	if err != nil {
		return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	if len(measurements) == 0 {
		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏ –∂–¥–µ–º –ø–µ—Ä–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		placeholder := widgets.NewParagraph()
		placeholder.Title = "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"
		placeholder.Text = "–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –±–∞—Ç–∞—Ä–µ–∏...\n–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n'q'/'–π' / Ctrl+C - –í—ã—Ö–æ–¥\n'h'/'—Ä' - –°–ø—Ä–∞–≤–∫–∞\nüåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏"
		placeholder.SetRect(0, 0, 80, 10)

		ui.Render(placeholder)

		// –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã—Ö–æ–¥–∞
		uiEvents := ui.PollEvents()
		ticker := time.NewTicker(2 * time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-ctx.Done():
				return nil
			case e := <-uiEvents:
				normalizedKey := normalizeKeyInput(e.ID)
				if normalizedKey == "q" || e.ID == "<C-c>" {
					return nil
				}
			case <-ticker.C:
				measurements, err = getLastNMeasurements(db, 50)
				if err == nil && len(measurements) > 0 {
					goto renderDashboard
				}
			}
		}
	}

renderDashboard:
	// –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å (–Ω–∞ —Å–ª—É—á–∞–π goto)
	if len(measurements) == 0 {
		return fmt.Errorf("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞")
	}

	// –ì—Ä–∞—Ñ–∏–∫ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
	batteryChart := widgets.NewPlot()
	batteryChart.Title = "–ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏ (%)"
	batteryChart.Data = make([][]float64, 1)

	// –ì—Ä–∞—Ñ–∏–∫ –µ–º–∫–æ—Å—Ç–∏
	capacityChart := widgets.NewPlot()
	capacityChart.Title = "–¢–µ–∫—É—â–∞—è –µ–º–∫–æ—Å—Ç—å (–º–ê—á)"
	capacityChart.Data = make([][]float64, 1)

	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
	safeUpdateChartData(batteryChart, capacityChart, measurements)

	// –°—Ç–∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
	batteryChart.AxesColor = ui.ColorWhite
	batteryChart.LineColors[0] = ui.ColorGreen
	capacityChart.AxesColor = ui.ColorWhite
	capacityChart.LineColors[0] = ui.ColorBlue

	// –¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	latest := measurements[len(measurements)-1]
	wear := computeWear(latest.DesignCapacity, latest.FullChargeCap)
	robustRate, _ := computeAvgRateRobust(measurements, 10)
	remaining := computeRemainingTime(latest.CurrentCapacity, robustRate)

	// –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
	anomalies := detectBatteryAnomalies(measurements)
	healthAnalysis := analyzeBatteryHealth(measurements)

	infoList := widgets.NewList()
	infoList.Title = "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
	infoRows := []string{
		fmt.Sprintf("üîã –ó–∞—Ä—è–¥: %d%%", latest.Percentage),
		fmt.Sprintf("‚ö° –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s", formatStateWithEmoji(latest.State, latest.Percentage)),
		fmt.Sprintf("üîÑ –¶–∏–∫–ª—ã: %d", latest.CycleCount),
		fmt.Sprintf("üìâ –ò–∑–Ω–æ—Å: %.1f%%", wear),
		fmt.Sprintf("‚è±Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: %.2f –º–ê—á/—á", robustRate),
		fmt.Sprintf("‚è∞ –í—Ä–µ–º—è: %s", remaining.Truncate(time.Minute)),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	if latest.Temperature > 0 {
		tempEmoji := "üå°Ô∏è"
		if latest.Temperature > 40 {
			tempEmoji = "üî•"
		} else if latest.Temperature < 20 {
			tempEmoji = "‚ùÑÔ∏è"
		}
		infoRows = append(infoRows, fmt.Sprintf("%s–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C", tempEmoji, latest.Temperature))
	}

	if healthAnalysis != nil {
		if status, ok := healthAnalysis["health_status"].(string); ok {
			score, _ := healthAnalysis["health_score"].(int)
			infoRows = append(infoRows, fmt.Sprintf("–ó–¥–æ—Ä–æ–≤—å–µ: %s (%d/100)", status, score))
		}
		if len(anomalies) > 0 {
			infoRows = append(infoRows, fmt.Sprintf("–ê–Ω–æ–º–∞–ª–∏–π: %d", len(anomalies)))
		}
	}

	infoRows = append(infoRows, getDashboardHotkeys()...)
	infoList.Rows = infoRows

	// –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
	stateGauge := widgets.NewGauge()
	stateGauge.Title = "–ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏"
	stateGauge.Percent = latest.Percentage
	stateGauge.BarColor = ui.ColorGreen
	stateGauge.BorderStyle = ui.NewStyle(ui.ColorWhite) // –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º —Å—Ç–∏–ª—å –≥—Ä–∞–Ω–∏—Ü
	if latest.Percentage < 20 {
		stateGauge.BarColor = ui.ColorRed
	} else if latest.Percentage < 50 {
		stateGauge.BarColor = ui.ColorYellow
	}

	// –ò–∑–Ω–æ—Å –±–∞—Ç–∞—Ä–µ–∏
	wearGauge := widgets.NewGauge()
	wearGauge.Title = "–ò–∑–Ω–æ—Å –±–∞—Ç–∞—Ä–µ–∏"
	wearGauge.Percent = int(wear)
	wearGauge.BarColor = ui.ColorRed
	wearGauge.BorderStyle = ui.NewStyle(ui.ColorWhite) // –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º —Å—Ç–∏–ª—å –≥—Ä–∞–Ω–∏—Ü

	// –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
	table := widgets.NewTable()
	table.Title = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è"
	table.Rows = [][]string{
		{"–í—Ä–µ–º—è", "–ó–∞—Ä—è–¥", "–°–æ—Å—Ç–æ—è–Ω–∏–µ", "–ï–º–∫–æ—Å—Ç—å"},
	}
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	table.ColumnWidths = []int{10, 8, 12, 12}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ
	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–π–∞—É—Ç —Å–Ω–∞—á–∞–ª–∞ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã
	layout := calculateLayout()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è (–Ω–µ –Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
	if layout.Table.X2 > layout.Table.X1 && layout.Table.Y2 > layout.Table.Y1 {
		// –í—ã—Å–æ—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã = Y2 - Y1, –º–∏–Ω—É—Å 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Ä–∞–º–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
		tableHeight := layout.Table.Y2 - layout.Table.Y1 - 3
		if tableHeight > 0 {
			maxRows := max(1, min(tableHeight, len(measurements))) // –ú–∏–Ω–∏–º—É–º 1 —Å—Ç—Ä–æ–∫–∞, –º–∞–∫—Å–∏–º—É–º —Å–∫–æ–ª—å–∫–æ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è

			// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
			start := max(0, len(measurements)-maxRows)
			for i := start; i < len(measurements); i++ {
				m := measurements[i]
				timeStr := m.Timestamp[11:19] // —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
				table.Rows = append(table.Rows, []string{
					timeStr,
					fmt.Sprintf("%3d%%", m.Percentage), // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
					m.State,
					fmt.Sprintf("%4d –º–ê—á", m.CurrentCapacity), // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –µ–º–∫–æ—Å—Ç–∏
				})
			}
		}
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ª–µ–π–∞—É—Ç
	applyLayout(layout, batteryChart, capacityChart, infoList, stateGauge, wearGauge, table)

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
	getVisibleWidgets := func(currentLayout DashboardLayout) []ui.Drawable {
		var widgets []ui.Drawable

		// –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã (–≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è)
		widgets = append(widgets, batteryChart, infoList)

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–º–µ—é—Ç —Ä–∞–∑–º–µ—Ä—ã
		if currentLayout.CapacityChart.X2 > currentLayout.CapacityChart.X1 && currentLayout.CapacityChart.Y2 > currentLayout.CapacityChart.Y1 {
			widgets = append(widgets, capacityChart)
		}
		if currentLayout.StateGauge.X2 > currentLayout.StateGauge.X1 && currentLayout.StateGauge.Y2 > currentLayout.StateGauge.Y1 {
			widgets = append(widgets, stateGauge)
		}
		if currentLayout.WearGauge.X2 > currentLayout.WearGauge.X1 && currentLayout.WearGauge.Y2 > currentLayout.WearGauge.Y1 {
			widgets = append(widgets, wearGauge)
		}
		if currentLayout.Table.X2 > currentLayout.Table.X1 && currentLayout.Table.Y2 > currentLayout.Table.Y1 {
			widgets = append(widgets, table)
		}

		return widgets
	}

	render := func() {
		widgets := getVisibleWidgets(layout)
		ui.Render(widgets...)
	}

	render()

	uiEvents := ui.PollEvents()
	ticker := time.NewTicker(10 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return nil
		case e := <-uiEvents:
			// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫
			normalizedKey := normalizeKeyInput(e.ID)
			switch normalizedKey {
			case "q":
				return nil
			case "<C-c>":
				return nil
			case "<Resize>":
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
				layout = calculateLayout() // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é layout
				applyLayout(layout, batteryChart, capacityChart, infoList, stateGauge, wearGauge, table)
				ui.Clear()
				render()
			case "r":
				// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
				newMeasurements, err := getLastNMeasurements(db, 50)
				if err == nil && len(newMeasurements) > 0 {
					measurements = newMeasurements
					latest = measurements[len(measurements)-1]

					// –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
					safeUpdateChartData(batteryChart, capacityChart, measurements)

					// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
					wear = computeWear(latest.DesignCapacity, latest.FullChargeCap)
					robustRate, _ := computeAvgRateRobust(measurements, 10)
					remaining = computeRemainingTime(latest.CurrentCapacity, robustRate)

					// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
					anomalies = detectBatteryAnomalies(measurements)
					healthAnalysis = analyzeBatteryHealth(measurements)

					// –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
					stateGauge.Percent = latest.Percentage
					wearGauge.Percent = int(wear)

					// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
					infoRows := []string{
						fmt.Sprintf("üîã –ó–∞—Ä—è–¥: %d%%", latest.Percentage),
						fmt.Sprintf("‚ö° –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s", formatStateWithEmoji(latest.State, latest.Percentage)),
						fmt.Sprintf("üîÑ –¶–∏–∫–ª—ã: %d", latest.CycleCount),
						fmt.Sprintf("üìâ –ò–∑–Ω–æ—Å: %.1f%%", wear),
						fmt.Sprintf("‚è±Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: %.2f –º–ê—á/—á", robustRate),
						fmt.Sprintf("‚è∞ –í—Ä–µ–º—è: %s", remaining.Truncate(time.Minute)),
					}

					// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
					if latest.Temperature > 0 {
						tempEmoji := "üå°Ô∏è"
						if latest.Temperature > 40 {
							tempEmoji = "üî•"
						} else if latest.Temperature < 20 {
							tempEmoji = "‚ùÑÔ∏è"
						}
						infoRows = append(infoRows, fmt.Sprintf("%s–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C", tempEmoji, latest.Temperature))
					}

					if healthAnalysis != nil {
						if status, ok := healthAnalysis["health_status"].(string); ok {
							score, _ := healthAnalysis["health_score"].(int)
							infoRows = append(infoRows, fmt.Sprintf("–ó–¥–æ—Ä–æ–≤—å–µ: %s (%d/100)", status, score))
						}
						if len(anomalies) > 0 {
							infoRows = append(infoRows, fmt.Sprintf("–ê–Ω–æ–º–∞–ª–∏–π: %d", len(anomalies)))
						}
					}

					infoRows = append(infoRows, getDashboardHotkeys()...)
					infoList.Rows = infoRows

					// –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
					layout = calculateLayout() // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é layout
					applyLayout(layout, batteryChart, capacityChart, infoList, stateGauge, wearGauge, table)

					render()
				}
			case "h":
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
				helpWidget := widgets.NewParagraph()
				helpWidget.Title = "–°–ø—Ä–∞–≤–∫–∞ - BatMon v2.0"
				helpWidget.Text = `üîã –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–ê–¢–ê–†–ï–ò

–û–ü–ò–°–ê–ù–ò–ï –ì–†–ê–§–ò–ö–û–í:
‚Ä¢ –õ–µ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ - –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ü—Ä–∞–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ - —Ç–µ–∫—É—â–∞—è —ë–º–∫–æ—Å—Ç—å –≤ –º–ê—á –≤–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏

–ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò:
‚Ä¢ 'q'/'–π' / Ctrl+C - –≤—ã—Ö–æ–¥ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ 'r'/'–∫' - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö  
‚Ä¢ 'h'/'—Ä' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É (–Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞)
üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

–ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
‚Ä¢ –ó–∞—Ä—è–¥ - —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ - —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è/—Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è/–ø–æ–¥–∫–ª—é—á–µ–Ω)
‚Ä¢ –¶–∏–∫–ª—ã - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞-—Ä–∞–∑—Ä—è–¥–∞
‚Ä¢ –ò–∑–Ω–æ—Å - –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–Ω–æ—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–æ–¥—Å–∫–æ–π —ë–º–∫–æ—Å—Ç–∏
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å - —Ç–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä—è–¥–∞ –≤ –º–ê—á/—á–∞—Å
‚Ä¢ –í—Ä–µ–º—è - –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã

–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥.
–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É...`

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
				termWidth, termHeight := ui.TerminalDimensions()
				helpWidget.SetRect(0, 0, termWidth, termHeight)

				ui.Clear()
				ui.Render(helpWidget)

				// –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –ª—é–±–æ–π –∫–ª–∞–≤–∏—à–∏
				for {
					helpEvent := <-uiEvents
					if helpEvent.Type == ui.KeyboardEvent {
						ui.Clear()
						render() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
						break
					}
				}
			}
		case <-ticker.C:
			// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
			newMeasurements, err := getLastNMeasurements(db, 50)
			if err == nil && len(newMeasurements) > 0 {
				measurements = newMeasurements
				latest = measurements[len(measurements)-1]
				wear = computeWear(latest.DesignCapacity, latest.FullChargeCap)
				robustRate, _ := computeAvgRateRobust(measurements, 10)
				remaining = computeRemainingTime(latest.CurrentCapacity, robustRate)

				// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ
				safeUpdateChartData(batteryChart, capacityChart, measurements)

				stateGauge.Percent = latest.Percentage
				if latest.Percentage < 20 {
					stateGauge.BarColor = ui.ColorRed
				} else if latest.Percentage < 50 {
					stateGauge.BarColor = ui.ColorYellow
				} else {
					stateGauge.BarColor = ui.ColorGreen
				}

				wearGauge.Percent = int(wear)

				// –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
				anomalies := detectBatteryAnomalies(measurements)
				healthAnalysis := analyzeBatteryHealth(measurements)

				// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
				infoRows := []string{
					fmt.Sprintf("üîã –ó–∞—Ä—è–¥: %d%%", latest.Percentage),
					fmt.Sprintf("‚ö° –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s", formatStateWithEmoji(latest.State, latest.Percentage)),
					fmt.Sprintf("üîÑ –¶–∏–∫–ª—ã: %d", latest.CycleCount),
					fmt.Sprintf("üìâ –ò–∑–Ω–æ—Å: %.1f%%", wear),
					fmt.Sprintf("‚è±Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: %.2f –º–ê—á/—á", robustRate),
					fmt.Sprintf("‚è∞ –í—Ä–µ–º—è: %s", remaining.Truncate(time.Minute)),
				}

				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
				if latest.Temperature > 0 {
					tempEmoji := "üå°Ô∏è"
					if latest.Temperature > 40 {
						tempEmoji = "üî•"
					} else if latest.Temperature < 20 {
						tempEmoji = "‚ùÑÔ∏è"
					}
					infoRows = append(infoRows, fmt.Sprintf("%s–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C", tempEmoji, latest.Temperature))
				}

				if healthAnalysis != nil {
					if status, ok := healthAnalysis["health_status"].(string); ok {
						score, _ := healthAnalysis["health_score"].(int)
						infoRows = append(infoRows, fmt.Sprintf("–ó–¥–æ—Ä–æ–≤—å–µ: %s (%d/100)", status, score))
					}
					if len(anomalies) > 0 {
						infoRows = append(infoRows, fmt.Sprintf("–ê–Ω–æ–º–∞–ª–∏–π: %d", len(anomalies)))
					}
				}

				infoRows = append(infoRows, getDashboardHotkeys()...)
				infoList.Rows = infoRows // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
				table.Rows = [][]string{
					{"–í—Ä–µ–º—è", "–ó–∞—Ä—è–¥", "–°–æ—Å—Ç–æ—è–Ω–∏–µ", "–ï–º–∫–æ—Å—Ç—å"},
				}
				for i := len(measurements) - 5; i < len(measurements) && i >= 0; i++ {
					if i < 0 {
						continue
					}
					m := measurements[i]
					timeStr := m.Timestamp[11:19]
					table.Rows = append(table.Rows, []string{
						timeStr,
						fmt.Sprintf("%d%%", m.Percentage),
						m.State,
						fmt.Sprintf("%d –º–ê—á", m.CurrentCapacity),
					})
				}

				// –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
				layout = calculateLayout() // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é layout
				applyLayout(layout, batteryChart, capacityChart, infoList, stateGauge, wearGauge, table)

				render()
			}
		}
	}
}

// printReport –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á—ë—Ç –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å —Ü–≤–µ—Ç–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.
func printReport(db *sqlx.DB) error {
	ms, err := getLastNMeasurements(db, 20) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
	if err != nil {
		return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	if len(ms) == 0 {
		color.Yellow("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
		return nil
	}

	latest := ms[len(ms)-1]
	avgRate := computeAvgRate(ms, 5)
	robustRate, validIntervals := computeAvgRateRobust(ms, 10)
	remaining := computeRemainingTime(latest.CurrentCapacity, robustRate)
	wear := computeWear(latest.DesignCapacity, latest.FullChargeCap)

	// –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è –±–∞—Ç–∞—Ä–µ–∏
	healthAnalysis := analyzeBatteryHealth(ms)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
	healthScore := 70
	if healthAnalysis != nil {
		if score, ok := healthAnalysis["health_score"].(int); ok {
			healthScore = score
		}
	}
	statusLevel := getStatusLevel(wear, latest.Percentage, latest.Temperature, healthScore)

	// –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
	color.Cyan("üíº === –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï ===")
	if healthAnalysis != nil {
		if status, ok := healthAnalysis["health_status"].(string); ok {
			score, _ := healthAnalysis["health_score"].(int)
			printColoredStatus("–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏", fmt.Sprintf("%s (—Ä–µ–π—Ç–∏–Ω–≥ %d/100)", status, score), getStatusLevel(wear, 100, 25, score))
		}
	}
	printColoredStatus("–¶–∏–∫–ª—ã", fmt.Sprintf("%d", latest.CycleCount), statusLevel)
	printColoredStatus("–ò–∑–Ω–æ—Å", fmt.Sprintf("%.1f%%", wear), getStatusLevel(wear, 100, 25, 100))
	if remaining > 0 {
		printColoredStatus("–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è", remaining.Truncate(time.Minute).String(), statusLevel)
	}
	fmt.Println()

	color.Cyan("=== –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ ===")
	localTime, _ := time.Parse(time.RFC3339, latest.Timestamp)
	fmt.Printf("üìÖ %s | ", localTime.Format("15:04:05 02.01.2006"))
	printColoredStatus("–ó–∞—Ä—è–¥", fmt.Sprintf("%d%%", latest.Percentage), getStatusLevel(0, latest.Percentage, 25, 100))
	fmt.Printf("‚ö° %s\n", formatStateWithEmoji(latest.State, latest.Percentage))
	fmt.Printf("üîÑ –ö–æ–ª-–≤–æ —Ü–∏–∫–ª–æ–≤: %d\n", latest.CycleCount)
	fmt.Printf("‚ö° –ü–æ–ª–Ω–∞—è —ë–º–∫–æ—Å—Ç—å: %d –º–ê—á\n", latest.FullChargeCap)
	fmt.Printf("üìê –ü—Ä–æ–µ–∫—Ç–Ω–∞—è —ë–º–∫–æ—Å—Ç—å: %d –º–ê—á\n", latest.DesignCapacity)
	fmt.Printf("üîã –¢–µ–∫—É—â–∞—è —ë–º–∫–æ—Å—Ç—å: %d –º–ê—á\n", latest.CurrentCapacity)

	// –í—ã–≤–æ–¥–∏–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	if latest.Temperature > 0 {
		tempLevel := "info"
		if latest.Temperature > 40 {
			tempLevel = "critical"
		} else if latest.Temperature > 35 {
			tempLevel = "warning"
		}
		printColoredStatus("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", fmt.Sprintf("%d¬∞C", latest.Temperature), tempLevel)
	}

	fmt.Println()
	color.Cyan("=== –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è –±–∞—Ç–∞—Ä–µ–∏ ===")
	if healthAnalysis != nil {
		if status, ok := healthAnalysis["health_status"].(string); ok {
			score, _ := healthAnalysis["health_score"].(int)
			printColoredStatus("–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", fmt.Sprintf("%s (–æ—Ü–µ–Ω–∫–∞: %d/100)", status, score), getStatusLevel(wear, 100, 25, score))
		}
		printColoredStatus("–ò–∑–Ω–æ—Å –±–∞—Ç–∞—Ä–µ–∏", fmt.Sprintf("%.1f%%", wear), getStatusLevel(wear, 100, 25, 100))

		// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
		if trendAnalysis, ok := healthAnalysis["trend_analysis"].(TrendAnalysis); ok {
			if trendAnalysis.DegradationRate != 0 {
				trendLevel := "good"
				if !trendAnalysis.IsHealthy {
					trendLevel = "warning"
				}
				if trendAnalysis.DegradationRate < -1.0 {
					trendLevel = "critical"
				}
				printColoredStatus("üìà –¢—Ä–µ–Ω–¥ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏", fmt.Sprintf("%.2f%% –≤ –º–µ—Å—è—Ü", trendAnalysis.DegradationRate), trendLevel)

				if trendAnalysis.ProjectedLifetime > 0 {
					fmt.Printf("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ 80%% –µ–º–∫–æ—Å—Ç–∏: ~%d –¥–Ω–µ–π\n", trendAnalysis.ProjectedLifetime)
				}
			}
		}

		if anomalies, ok := healthAnalysis["anomalies"].([]string); ok && len(anomalies) > 0 {
			color.Yellow("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è: %d", len(anomalies))
			for i, anomaly := range anomalies {
				if i >= 5 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π
					color.Yellow("... –∏ –µ—â–µ %d", len(anomalies)-i)
					break
				}
				color.Red("  ‚Ä¢ %s", anomaly)
			}
		}

		if recs, ok := healthAnalysis["recommendations"].([]string); ok && len(recs) > 0 {
			color.Green("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
			for _, rec := range recs {
				color.Green("  ‚Ä¢ %s", rec)
			}
		}
	}

	fmt.Println()
	color.Cyan("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—Ä—è–¥–∫–∏ ===")
	if avgRate > 0 {
		fmt.Printf("üìä –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä—è–¥–∫–∏: %.2f –º–ê—á/—á–∞—Å\n", avgRate)
	}
	if robustRate > 0 {
		rateLevel := "good"
		if robustRate > 1000 {
			rateLevel = "warning"
		} else if robustRate > 1500 {
			rateLevel = "critical"
		}
		printColoredStatus("üìà –†–æ–±–∞—Å—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä—è–¥–∫–∏", fmt.Sprintf("%.2f –º–ê—á/—á–∞—Å (–Ω–∞ –æ—Å–Ω–æ–≤–µ %d –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤)", robustRate, validIntervals), rateLevel)
	} else {
		color.Yellow("üìà –†–æ–±–∞—Å—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä—è–¥–∫–∏: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
	}
	if remaining > 0 {
		printColoredStatus("‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", remaining.Truncate(time.Minute).String(), statusLevel)
	} else {
		color.Yellow("‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
	}

	fmt.Println()
	color.Cyan("=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º) ===")
	startIdx := 0
	if len(ms) > 10 {
		startIdx = len(ms) - 10 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
	}

	fmt.Printf("%-10s | %-5s | %-12s | %-4s | %-4s | %-4s | %-6s | %-4s\n",
		"–í—Ä–µ–º—è", "–ó–∞—Ä—è–¥", "–°–æ—Å—Ç–æ—è–Ω–∏–µ", "–¶–∏–∫–ª", "–ü–ï", "–ü—Ä–æ–ï", "–¢–µ–∫–ï", "–¢–µ–º–ø")
	fmt.Println(strings.Repeat("-", 80))

	for i := startIdx; i < len(ms); i++ {
		if i < 0 {
			continue
		}
		m := ms[i]
		// –ü–æ–º–µ—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
		marker := "  "
		if i > 0 {
			prev := ms[i-1]
			chargeDiff := abs(m.Percentage - prev.Percentage)
			capacityDiff := abs(m.CurrentCapacity - prev.CurrentCapacity)
			if chargeDiff > 20 || capacityDiff > 500 {
				marker = "‚ö†Ô∏è "
			}
		}

		timeStr := m.Timestamp[11:19] // —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
		tempStr := "-"
		if m.Temperature > 0 {
			tempStr = fmt.Sprintf("%d¬∞C", m.Temperature)
		}

		line := fmt.Sprintf("%s%-10s | %-5d | %-12s | %-4d | %-4d | %-4d | %-6d | %-4s",
			marker, timeStr, m.Percentage,
			strings.Replace(formatStateWithEmoji(m.State, m.Percentage), "üîã", "", -1)[:min(12, len(strings.Replace(formatStateWithEmoji(m.State, m.Percentage), "üîã", "", -1)))],
			m.CycleCount, m.FullChargeCap, m.DesignCapacity, m.CurrentCapacity, tempStr)

		if marker == "‚ö†Ô∏è " {
			color.Red(line)
		} else {
			fmt.Println(line)
		}
	}
	return nil
}

// main ‚Äì —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
func main() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	if len(os.Args) > 1 {
		switch os.Args[1] {
		case "-help", "--help", "help":
			showHelp()
			return
		case "-export-md", "--export-md":
			if len(os.Args) < 3 {
				color.New(color.FgRed).Println("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
				return
			}
			if err := runExportMode(os.Args[2], "", true); err != nil {
				log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: %v", err)
			}
			return
		case "-export-html", "--export-html":
			if len(os.Args) < 3 {
				color.New(color.FgRed).Println("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
				return
			}
			if err := runExportMode("", os.Args[2], true); err != nil {
				log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: %v", err)
			}
			return
		}
	}

	// –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
	for {
		if err := showMainMenu(); err != nil {
			color.New(color.FgRed).Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
			color.New(color.FgWhite).Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
			fmt.Scanln()
			continue
		}
		break
	}
}

// showMainMenu –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func showMainMenu() error {
	for {
		// –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		fmt.Print("\033[2J\033[H") // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞

		color.New(color.FgCyan, color.Bold).Println("üîã BatMon v2.0 - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏ MacBook")
		color.New(color.FgWhite).Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
		fmt.Println()

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏
		if err := showQuickStatus(); err != nil {
			color.New(color.FgYellow).Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: %v\n\n", err)
		}

		// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		color.New(color.FgGreen, color.Bold).Println("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		fmt.Println()
		fmt.Println("  1Ô∏è‚É£  –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
		fmt.Println("  2Ô∏è‚É£  –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
		fmt.Println("  3Ô∏è‚É£  –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã")
		fmt.Println("  4Ô∏è‚É£  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
		fmt.Println("  5Ô∏è‚É£  –°–ø—Ä–∞–≤–∫–∞")
		fmt.Println("  0Ô∏è‚É£  –í—ã—Ö–æ–¥")
		fmt.Println()

		color.New(color.FgWhite).Print("–í–∞—à –≤—ã–±–æ—Ä (0-5): ")

		var choice string
		fmt.Scanln(&choice)

		switch choice {
		case "1":
			return runMonitoringMode()
		case "2":
			return runReportMode()
		case "3":
			return runExportMenu()
		case "4":
			return runSettingsMenu()
		case "5":
			showHelp()
		case "0", "q", "exit":
			color.New(color.FgGreen).Println("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return nil
		default:
			color.New(color.FgRed).Println("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
			fmt.Scanln()
		}
	}
}

// showQuickStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ–∏
func showQuickStatus() error {
	pct, state, err := parsePMSet()
	if err != nil {
		return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: %w", err)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞—Ä—è–¥–∞
	var percentColor *color.Color
	if pct >= 50 {
		percentColor = color.New(color.FgGreen, color.Bold)
	} else if pct >= 20 {
		percentColor = color.New(color.FgYellow, color.Bold)
	} else {
		percentColor = color.New(color.FgRed, color.Bold)
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
	stateFormatted := formatStateWithEmoji(state, pct)

	color.New(color.FgWhite).Print("üí° –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ")
	percentColor.Printf("%d%% ", pct)
	color.New(color.FgCyan).Printf("(%s)", stateFormatted)

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ –ø–∏—Ç–∞–Ω–∏—è
	if strings.ToLower(state) == "charging" {
		color.New(color.FgBlue).Print(" üîå –ù–∞ –∑–∞—Ä—è–¥–∫–µ")
	} else if strings.ToLower(state) == "discharging" {
		color.New(color.FgMagenta).Print(" üîã –û—Ç –±–∞—Ç–∞—Ä–µ–∏")
	} else {
		color.New(color.FgGreen).Print(" ‚úÖ –ó–∞—Ä—è–∂–µ–Ω–∞")
	}

	fmt.Println()
	fmt.Println()

	return nil
}

// runMonitoringMode –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func runMonitoringMode() error {
	color.New(color.FgGreen).Println("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
	fmt.Println("üí° –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
	fmt.Println()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
	db, err := initDB(dbFile)
	if err != nil {
		return fmt.Errorf("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: %w", err)
	}
	defer db.Close()

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		<-sigs
		color.New(color.FgYellow).Println("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
		cancel()
	}()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è
	onBattery, state, percentage, err := isOnBattery()
	if err != nil {
		color.New(color.FgYellow).Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è: %v\n", err)
		return runReportMode() // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∏–º–µ—é—â–∏–º—Å—è –¥–∞–Ω–Ω—ã–º
	}

	color.New(color.FgCyan).Printf("‚ö° –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è: %s (%d%%)\n",
		formatStateWithEmoji(state, percentage), percentage)

	if onBattery {
		color.New(color.FgBlue).Println("üîã –†–∞–±–æ—Ç–∞ –æ—Ç –±–∞—Ç–∞—Ä–µ–∏ - –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∞—à–±–æ—Ä–¥–∞...")

		// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
		var wg sync.WaitGroup
		wg.Add(1)
		go backgroundDataCollection(db, ctx, &wg)

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
		time.Sleep(2 * time.Second)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
		if err := showDashboard(db, ctx); err != nil {
			log.Printf("–¥–∞—à–±–æ—Ä–¥: %v", err)
		}

		cancel()
		wg.Wait()
	} else {
		color.New(color.FgGreen).Println("üîå –†–∞–±–æ—Ç–∞ –æ—Ç —Å–µ—Ç–∏ - –ø–æ–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
		return runReportMode()
	}

	return nil
}

// runReportMode –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
func runReportMode() error {
	color.New(color.FgBlue).Println("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

	db, err := initDB(dbFile)
	if err != nil {
		return fmt.Errorf("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: %w", err)
	}
	defer db.Close()

	if err := printReport(db); err != nil {
		return fmt.Errorf("–≤—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞: %w", err)
	}

	color.New(color.FgWhite).Print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
	fmt.Scanln()

	return nil
}

// runExportMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
func runExportMenu() error {
	for {
		fmt.Print("\033[2J\033[H") // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞

		color.New(color.FgCyan, color.Bold).Println("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
		color.New(color.FgWhite).Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
		fmt.Println()

		fmt.Println("  1Ô∏è‚É£  –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown (.md)")
		fmt.Println("  2Ô∏è‚É£  –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML (.html)")
		fmt.Println("  3Ô∏è‚É£  –≠–∫—Å–ø–æ—Ä—Ç –≤ –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞")
		fmt.Println("  0Ô∏è‚É£  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
		fmt.Println()

		color.New(color.FgWhite).Print("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (0-3): ")

		var choice string
		fmt.Scanln(&choice)

		switch choice {
		case "1":
			return handleExport("md")
		case "2":
			return handleExport("html")
		case "3":
			return handleExport("both")
		case "0", "back":
			return nil
		default:
			color.New(color.FgRed).Println("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
			fmt.Scanln()
		}
	}
}

// handleExport –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func handleExport(format string) error {
	color.New(color.FgWhite).Print("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è): ")
	var filename string
	fmt.Scanln(&filename)

	if filename == "" {
		filename = fmt.Sprintf("battery_report_%s", time.Now().Format("20060102_150405"))
		color.New(color.FgCyan).Printf("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s\n", filename)
	}

	var markdownFile, htmlFile string

	switch format {
	case "md":
		markdownFile = filename
	case "html":
		htmlFile = filename
	case "both":
		markdownFile = filename
		htmlFile = filename
	}

	fmt.Println()
	color.New(color.FgBlue).Println("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

	err := runExportMode(markdownFile, htmlFile, false)
	if err != nil {
		color.New(color.FgRed).Printf("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: %v\n", err)
	} else {
		color.New(color.FgGreen).Println("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	}

	color.New(color.FgWhite).Print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
	fmt.Scanln()

	return err
}

// runSettingsMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func runSettingsMenu() error {
	for {
		fmt.Print("\033[2J\033[H") // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞

		color.New(color.FgCyan, color.Bold).Println("‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
		color.New(color.FgWhite).Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
		fmt.Println()

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
		if err := showDatabaseStats(); err != nil {
			color.New(color.FgRed).Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v\n", err)
		}

		fmt.Println()
		fmt.Println("  1Ô∏è‚É£  –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
		fmt.Println("  2Ô∏è‚É£  –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
		fmt.Println("  3Ô∏è‚É£  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
		fmt.Println("  0Ô∏è‚É£  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
		fmt.Println()

		color.New(color.FgWhite).Print("–í–∞—à –≤—ã–±–æ—Ä (0-3): ")

		var choice string
		fmt.Scanln(&choice)

		switch choice {
		case "1":
			return showAdvancedMetrics()
		case "2":
			return cleanupOldData()
		case "3":
			return showSystemInfo()
		case "0", "back":
			return nil
		default:
			color.New(color.FgRed).Println("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
			fmt.Scanln()
		}
	}
}

// showDatabaseStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func showDatabaseStats() error {
	db, err := initDB(dbFile)
	if err != nil {
		return err
	}
	defer db.Close()

	collector := NewDataCollector(db)
	stats, err := collector.GetStats()
	if err != nil {
		return err
	}

	color.New(color.FgGreen).Println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
	fmt.Printf("   üì¶ –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: %v\n", stats["total_records"])
	fmt.Printf("   üíæ –†–∞–∑–º–µ—Ä –ë–î: %.1f –ú–ë\n", stats["db_size_mb"])
	fmt.Printf("   üóÑÔ∏è –ë—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏: %v/%v –∑–∞–ø–∏—Å–µ–π\n", stats["buffer_size"], stats["buffer_max_size"])

	if oldest, ok := stats["oldest_record"].(string); ok && oldest != "" {
		color.New(color.FgCyan).Printf("   üìÖ –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å: %s\n", oldest)
	}
	if newest, ok := stats["newest_record"].(string); ok && newest != "" {
		color.New(color.FgCyan).Printf("   üìÖ –°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: %s\n", newest)
	}

	return nil
}

// showAdvancedMetrics –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
func showAdvancedMetrics() error {
	color.New(color.FgBlue).Println("üî¨ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...")

	db, err := initDB(dbFile)
	if err != nil {
		return err
	}
	defer db.Close()

	measurements, err := getLastNMeasurements(db, 50)
	if err != nil {
		return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	if len(measurements) == 0 {
		color.New(color.FgYellow).Println("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
		color.New(color.FgWhite).Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
		fmt.Scanln()
		return nil
	}

	metrics := analyzeAdvancedMetrics(measurements)

	fmt.Println()
	color.New(color.FgGreen, color.Bold).Println("üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
	color.New(color.FgWhite).Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

	fmt.Printf("‚ö° –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %.1f%%\n", metrics.PowerEfficiency)
	fmt.Printf("üîß –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è: %.1f%%\n", metrics.VoltageStability)
	fmt.Printf("üîã –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏: %.2f\n", metrics.ChargingEfficiency)
	fmt.Printf("üìä –¢—Ä–µ–Ω–¥ –º–æ—â–Ω–æ—Å—Ç–∏: %s\n", metrics.PowerTrend)
	fmt.Printf("üèÜ –†–µ–π—Ç–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è: %d/100\n", metrics.HealthRating)
	fmt.Printf("üçé –°—Ç–∞—Ç—É—Å Apple: %s\n", metrics.AppleStatus)

	fmt.Println()
	color.New(color.FgWhite).Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
	fmt.Scanln()

	return nil
}

// cleanupOldData –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func cleanupOldData() error {
	color.New(color.FgYellow).Println("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

	db, err := initDB(dbFile)
	if err != nil {
		return err
	}
	defer db.Close()

	retention := NewDataRetention(db, 90*24*time.Hour) // 3 –º–µ—Å—è—Ü–∞

	if err := retention.Cleanup(); err != nil {
		color.New(color.FgRed).Printf("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: %v\n", err)
	} else {
		color.New(color.FgGreen).Println("‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	}

	color.New(color.FgWhite).Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
	fmt.Scanln()

	return nil
}

// showSystemInfo –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
func showSystemInfo() error {
	color.New(color.FgGreen, color.Bold).Println("üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
	color.New(color.FgWhite).Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ Go
	fmt.Printf("üîß –í–µ—Ä—Å–∏—è Go: %s\n", "1.24+")
	fmt.Printf("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite —Å WAL —Ä–µ–∂–∏–º–æ–º\n")
	fmt.Printf("üìÅ –§–∞–π–ª –ë–î: %s\n", dbFile)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
	if _, err := exec.LookPath("pmset"); err == nil {
		color.New(color.FgGreen).Println("‚úÖ pmset –¥–æ—Å—Ç—É–ø–µ–Ω")
	} else {
		color.New(color.FgRed).Println("‚ùå pmset –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}

	if _, err := exec.LookPath("system_profiler"); err == nil {
		color.New(color.FgGreen).Println("‚úÖ system_profiler –¥–æ—Å—Ç—É–ø–µ–Ω")
	} else {
		color.New(color.FgRed).Println("‚ùå system_profiler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}

	fmt.Println()
	color.New(color.FgWhite).Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
	fmt.Scanln()

	return nil
}

// showHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
func showHelp() {
	fmt.Print("\033[2J\033[H") // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞

	color.New(color.FgCyan, color.Bold).Println("‚ùì –°–ø—Ä–∞–≤–∫–∞ BatMon v2.0")
	color.New(color.FgWhite).Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println()

	color.New(color.FgGreen).Println("üîã –û –ø—Ä–æ–≥—Ä–∞–º–º–µ:")
	fmt.Println("BatMon - —ç—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ MacBook.")
	fmt.Println("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤.")
	fmt.Println()

	color.New(color.FgYellow).Println("üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
	fmt.Println("‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏")
	fmt.Println("‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏")
	fmt.Println("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
	fmt.Println("‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown –∏ HTML —Ñ–æ—Ä–º–∞—Ç—ã")
	fmt.Println("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç–µ–Ω—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
	fmt.Println("‚Ä¢ –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –∏ —ç–º–æ–¥–∑–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
	fmt.Println()

	color.New(color.FgBlue).Println("üéØ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:")
	fmt.Println("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –æ—Ç –±–∞—Ç–∞—Ä–µ–∏")
	fmt.Println("2. –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç - –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
	fmt.Println("3. –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª—ã")
	fmt.Println("4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏—Å—Ç–µ–º–µ")
	fmt.Println()

	color.New(color.FgMagenta).Println("üîß –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
	fmt.Println("‚Ä¢ macOS (–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ Apple Silicon)")
	fmt.Println("‚Ä¢ Go 1.24+ –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤")
	fmt.Println("‚Ä¢ MacBook —Å –±–∞—Ç–∞—Ä–µ–µ–π")
	fmt.Println()

	color.New(color.FgRed).Println("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:")
	fmt.Println("‚Ä¢ GitHub: https://github.com/region23/batmon")
	fmt.Println("‚Ä¢ Issues: —Å–æ–æ–±—â–∞–π—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —á–µ—Ä–µ–∑ GitHub Issues")
	fmt.Println()

	color.New(color.FgWhite).Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
	fmt.Scanln()
}

// runExportMode –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤
func runExportMode(markdownFile, htmlFile string, quiet bool) error {
	if !quiet {
		fmt.Println("üîã Batmon - –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
	}

	db, err := initDB(dbFile)
	if err != nil {
		return fmt.Errorf("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: %w", err)
	}
	defer db.Close()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
	data, err := generateReportData(db)
	if err != nil {
		return fmt.Errorf("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞: %w", err)
	}

	var exported []string

	// –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown
	if markdownFile != "" {
		if !strings.HasSuffix(markdownFile, ".md") {
			markdownFile += ".md"
		}

		if !quiet {
			fmt.Printf("üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –æ—Ç—á–µ—Ç –≤ Markdown: %s\n", markdownFile)
		}

		if err := exportToMarkdown(data, markdownFile); err != nil {
			return fmt.Errorf("—ç–∫—Å–ø–æ—Ä—Ç –≤ Markdown: %w", err)
		}
		exported = append(exported, markdownFile)
	}

	// –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML
	if htmlFile != "" {
		if !strings.HasSuffix(htmlFile, ".html") && !strings.HasSuffix(htmlFile, ".htm") {
			htmlFile += ".html"
		}

		if !quiet {
			fmt.Printf("üåê –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –æ—Ç—á–µ—Ç –≤ HTML: %s\n", htmlFile)
		}

		if err := exportToHTML(data, htmlFile); err != nil {
			return fmt.Errorf("—ç–∫—Å–ø–æ—Ä—Ç –≤ HTML: %w", err)
		}
		exported = append(exported, htmlFile)
	}

	if !quiet && len(exported) > 0 {
		fmt.Printf("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:\n")
		for _, file := range exported {
			absPath, _ := filepath.Abs(file)
			fmt.Printf("   - %s\n", absPath)
		}
	}

	return nil
}
