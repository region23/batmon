package main

import (
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/fatih/color"
)

// getVersion –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func getVersion() string {
	return "2.0"
}

// showVersion –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func showVersion() {
	version := getVersion()
	color.New(color.FgCyan, color.Bold).Printf("BatMon %s\n", version)
	color.New(color.FgWhite).Println("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏ MacBook (Apple Silicon)")
}

// showHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
func showHelp() {
	fmt.Print("\033[2J\033[H") // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
	color.New(color.FgCyan, color.Bold).Println("‚ùì –°–ø—Ä–∞–≤–∫–∞ BatMon v2.0")
	color.New(color.FgWhite).Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println()
	color.New(color.FgGreen).Println("üîã –û –ø—Ä–æ–≥—Ä–∞–º–º–µ:")
	fmt.Println("BatMon - —ç—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ MacBook.")
	fmt.Println("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤.")
	fmt.Println()
	color.New(color.FgYellow).Println("üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
	fmt.Println("‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏")
	fmt.Println("‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏") 
	fmt.Println("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
	fmt.Println("‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown –∏ HTML —Ñ–æ—Ä–º–∞—Ç—ã")
	fmt.Println("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç–µ–Ω—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
	fmt.Println("‚Ä¢ –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –∏ —ç–º–æ–¥–∑–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
	fmt.Println()
	color.New(color.FgBlue).Println("‚å®Ô∏è  –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:")
	fmt.Println("q/Q - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
	fmt.Println("h/H/? - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println("v/V - –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é")
	fmt.Println("d/D - –î–∞—à–±–æ—Ä–¥ (–≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω)")
	fmt.Println("r/R - –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
	fmt.Println("e/E - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
	fmt.Println("s/S - –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
	fmt.Println("1-7 - –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
	fmt.Println("‚Üë‚Üì - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é")
	fmt.Println("Enter - –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é")
	fmt.Println("Esc - –ù–∞–∑–∞–¥/–æ—Ç–º–µ–Ω–∞")
	fmt.Println()
	color.New(color.FgMagenta).Println("üöÄ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:")
	fmt.Println("batmon -export-md <—Ñ–∞–π–ª>  - –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown")
	fmt.Println("batmon -export-html <—Ñ–∞–π–ª> - –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML")
	fmt.Println("batmon -version           - –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é")
	fmt.Println("batmon -help              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println()
	color.New(color.FgRed).Println("‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:")
	fmt.Println("‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç macOS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞—Ç–∞—Ä–µ–µ–π")
	fmt.Println("‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ ~/.local/share/batmon/")
	fmt.Println("‚Ä¢ –î–ª—è —Ç–æ—á–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pmset –∏ ioreg")
	fmt.Println("‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–µ –Ω–∞ –≤—Å–µ—Ö Mac")
	fmt.Println()
}

// runExportMode –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º —ç–∫—Å–ø–æ—Ä—Ç–∞
func runExportMode(markdownFile, htmlFile string, quiet bool) error {
	if !quiet {
		fmt.Println("üîã Batmon - –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
	}
	
	db, err := initDB(getDBPath())
	if err != nil {
		return fmt.Errorf("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: %w", err)
	}
	defer db.Close()
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
	data, err := generateReportData(db)
	if err != nil {
		return fmt.Errorf("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞: %w", err)
	}
	
	var exported []string
	
	// –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown
	if markdownFile != "" {
		fullPath, err := getExportPath(markdownFile)
		if err != nil {
			return fmt.Errorf("–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ MD —Ñ–∞–π–ª–∞: %w", err)
		}
		
		if err := exportToMarkdown(data, fullPath); err != nil {
			return fmt.Errorf("—ç–∫—Å–ø–æ—Ä—Ç –≤ Markdown: %w", err)
		}
		exported = append(exported, fullPath)
		if !quiet {
			fmt.Printf("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown: %s\n", fullPath)
		}
	}
	
	// –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML
	if htmlFile != "" {
		fullPath, err := getExportPath(htmlFile)
		if err != nil {
			return fmt.Errorf("–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ HTML —Ñ–∞–π–ª–∞: %w", err)
		}
		
		if err := exportToHTML(data, fullPath); err != nil {
			return fmt.Errorf("—ç–∫—Å–ø–æ—Ä—Ç –≤ HTML: %w", err)
		}
		exported = append(exported, fullPath)
		if !quiet {
			fmt.Printf("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML: %s\n", fullPath)
		}
	}
	
	if !quiet && len(exported) > 0 {
		fmt.Printf("üéâ –£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(exported))
	}
	
	return nil
}

// generateReportData –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
func generateReportData(db DatabaseInterface) (ReportData, error) {
	var data ReportData
	
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
	measurements, err := getLastNMeasurements(db, 100)
	if err != nil {
		return data, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π: %w", err)
	}
	
	if len(measurements) == 0 {
		return data, fmt.Errorf("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
	}
	
	data.Measurements = measurements
	data.GeneratedAt = time.Now()
	data.Version = getVersion()
	
	// –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è –±–∞—Ç–∞—Ä–µ–∏
	healthAnalysis := analyzeBatteryHealth(measurements)
	if healthAnalysis != nil {
		if wear, ok := healthAnalysis["wear_percentage"].(float64); ok {
			data.WearLevel = wear
		}
		if status, ok := healthAnalysis["health_status"].(string); ok {
			data.HealthStatus = status
		}
		if recommendations, ok := healthAnalysis["recommendations"].([]string); ok {
			data.Recommendations = recommendations
		}
		if cycles, ok := healthAnalysis["charge_cycles"].([]ChargeCycle); ok {
			data.ChargeCycles = cycles
		}
		if anomalies, ok := healthAnalysis["anomalies"].([]string); ok {
			data.Anomalies = anomalies
		}
	}
	
	// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
	data.TrendAnalysis = analyzeCapacityTrend(measurements)
	
	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
	data.AdvancedMetrics = analyzeAdvancedMetrics(measurements)
	
	return data, nil
}

// exportToMarkdown —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Markdown
func exportToMarkdown(data ReportData, filename string) error {
	var content strings.Builder
	
	content.WriteString("# üîã –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ BatMon\n\n")
	content.WriteString(fmt.Sprintf("**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** %s\n", data.GeneratedAt.Format("2006-01-02 15:04:05")))
	content.WriteString(fmt.Sprintf("**–í–µ—Ä—Å–∏—è BatMon:** %s\n\n", data.Version))
	
	if len(data.Measurements) > 0 {
		latest := data.Measurements[len(data.Measurements)-1]
		content.WriteString("## üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n")
		content.WriteString(fmt.Sprintf("- **–ó–∞—Ä—è–¥:** %d%%\n", latest.Percentage))
		content.WriteString(fmt.Sprintf("- **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** %s\n", formatStateWithEmoji(latest.State, latest.Percentage)))
		content.WriteString(fmt.Sprintf("- **–¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞:** %d\n", latest.CycleCount))
		content.WriteString(fmt.Sprintf("- **–ü–æ–ª–Ω–∞—è –µ–º–∫–æ—Å—Ç—å:** %d –º–ê—á\n", latest.FullChargeCap))
		content.WriteString(fmt.Sprintf("- **–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –µ–º–∫–æ—Å—Ç—å:** %d –º–ê—á\n", latest.DesignCapacity))
		content.WriteString(fmt.Sprintf("- **–ò–∑–Ω–æ—Å:** %.1f%%\n", data.WearLevel))
		content.WriteString(fmt.Sprintf("- **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** %d¬∞C\n", latest.Temperature))
		content.WriteString(fmt.Sprintf("- **–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ:** %d –º–í\n", latest.Voltage))
		if latest.AppleCondition != "" {
			content.WriteString(fmt.Sprintf("- **–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç Apple:** %s\n", latest.AppleCondition))
		}
		content.WriteString("\n")
	}
	
	// –ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏
	content.WriteString("## üíä –ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏\n\n")
	content.WriteString(fmt.Sprintf("**–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:** %s\n\n", data.HealthStatus))
	
	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
	if data.AdvancedMetrics.HealthRating > 0 {
		content.WriteString("### üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n\n")
		content.WriteString(fmt.Sprintf("- **–†–µ–π—Ç–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è:** %d/100\n", data.AdvancedMetrics.HealthRating))
		if data.AdvancedMetrics.VoltageStability > 0 {
			content.WriteString(fmt.Sprintf("- **–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è:** %.1f%%\n", data.AdvancedMetrics.VoltageStability))
		}
		if data.AdvancedMetrics.PowerEfficiency > 0 {
			content.WriteString(fmt.Sprintf("- **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:** %.1f\n", data.AdvancedMetrics.PowerEfficiency))
		}
		if data.AdvancedMetrics.PowerTrend != "" {
			content.WriteString(fmt.Sprintf("- **–¢—Ä–µ–Ω–¥ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:** %s\n", data.AdvancedMetrics.PowerTrend))
		}
		content.WriteString("\n")
	}
	
	// –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
	if !data.TrendAnalysis.IsHealthy {
		content.WriteString("### üìâ –ê–Ω–∞–ª–∏–∑ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏\n\n")
		content.WriteString(fmt.Sprintf("- **–°–∫–æ—Ä–æ—Å—Ç—å –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏:** %.2f%% –≤ –º–µ—Å—è—Ü\n", data.TrendAnalysis.DegradationRate))
		if data.TrendAnalysis.ProjectedLifetime > 0 {
			content.WriteString(fmt.Sprintf("- **–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ 80%% –µ–º–∫–æ—Å—Ç–∏:** %d –¥–Ω–µ–π\n", data.TrendAnalysis.ProjectedLifetime))
		}
		content.WriteString("\n")
	}
	
	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	if len(data.Recommendations) > 0 {
		content.WriteString("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
		for _, rec := range data.Recommendations {
			content.WriteString(fmt.Sprintf("- %s\n", rec))
		}
		content.WriteString("\n")
	}
	
	// –ê–Ω–æ–º–∞–ª–∏–∏
	if len(data.Anomalies) > 0 {
		content.WriteString("## ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏\n\n")
		for _, anomaly := range data.Anomalies {
			content.WriteString(fmt.Sprintf("- %s\n", anomaly))
		}
		content.WriteString("\n")
	}
	
	// –¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞-—Ä–∞–∑—Ä—è–¥–∞
	if len(data.ChargeCycles) > 0 {
		content.WriteString("## üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞\n\n")
		content.WriteString("| –¢–∏–ø | –ù–∞—á–∞–ª–æ | –ö–æ–Ω–µ—Ü | –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—Ä—è–¥–∞ |\n")
		content.WriteString("|-----|--------|-------|------------------|\n")
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏–∫–ª–æ–≤
		start := 0
		if len(data.ChargeCycles) > 10 {
			start = len(data.ChargeCycles) - 10
		}
		
		for i := start; i < len(data.ChargeCycles); i++ {
			cycle := data.ChargeCycles[i]
			content.WriteString(fmt.Sprintf("| %s | %s | %s | %d%% ‚Üí %d%% |\n",
				cycle.CycleType,
				cycle.StartTime.Format("15:04:05"),
				cycle.EndTime.Format("15:04:05"),
				cycle.StartPercent,
				cycle.EndPercent))
		}
		content.WriteString("\n")
	}
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	content.WriteString("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n\n")
	content.WriteString(fmt.Sprintf("- **–í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π:** %d\n", len(data.Measurements)))
	if len(data.Measurements) > 0 {
		first := data.Measurements[0]
		latest := data.Measurements[len(data.Measurements)-1]
		firstTime, _ := time.Parse(time.RFC3339, first.Timestamp)
		latestTime, _ := time.Parse(time.RFC3339, latest.Timestamp)
		content.WriteString(fmt.Sprintf("- **–ü–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:** %s - %s\n", 
			firstTime.Format("2006-01-02 15:04"), 
			latestTime.Format("2006-01-02 15:04")))
		content.WriteString(fmt.Sprintf("- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** %s\n", 
			formatDuration(latestTime.Sub(firstTime))))
	}
	
	content.WriteString("\n---\n")
	content.WriteString("*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ BatMon*")
	
	return os.WriteFile(filename, []byte(content.String()), 0644)
}

// exportToHTML —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç HTML
func exportToHTML(data ReportData, filename string) error {
	var content strings.Builder
	
	content.WriteString("<!DOCTYPE html>\n<html lang=\"ru\">\n<head>\n")
	content.WriteString("<meta charset=\"UTF-8\">\n")
	content.WriteString("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n")
	content.WriteString("<title>üîã –û—Ç—á–µ—Ç BatMon</title>\n")
	content.WriteString("<style>\n")
	content.WriteString(`
		body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 40px; background: #f5f5f7; color: #333; }
		.container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }
		h1 { color: #1d1d1f; border-bottom: 3px solid #007AFF; padding-bottom: 10px; }
		h2 { color: #007AFF; margin-top: 30px; }
		h3 { color: #34C759; }
		.status-good { color: #34C759; font-weight: bold; }
		.status-warning { color: #FF9500; font-weight: bold; }
		.status-critical { color: #FF3B30; font-weight: bold; }
		.metric { display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #f0f0f0; }
		.metric-name { font-weight: 600; }
		.metric-value { color: #007AFF; }
		.recommendation { background: #E3F2FD; padding: 12px; margin: 8px 0; border-radius: 8px; border-left: 4px solid #2196F3; }
		.anomaly { background: #FFEBEE; padding: 12px; margin: 8px 0; border-radius: 8px; border-left: 4px solid #F44336; }
		table { width: 100%; border-collapse: collapse; margin: 20px 0; }
		th, td { padding: 12px; text-align: left; border-bottom: 1px solid #e0e0e0; }
		th { background: #f8f9fa; font-weight: 600; }
		.footer { margin-top: 40px; text-align: center; color: #666; font-size: 14px; }
	`)
	content.WriteString("</style>\n</head>\n<body>\n")
	content.WriteString("<div class=\"container\">\n")
	
	content.WriteString("<h1>üîã –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ BatMon</h1>\n")
	content.WriteString(fmt.Sprintf("<p><strong>–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</strong> %s</p>\n", data.GeneratedAt.Format("2006-01-02 15:04:05")))
	content.WriteString(fmt.Sprintf("<p><strong>–í–µ—Ä—Å–∏—è BatMon:</strong> %s</p>\n", data.Version))
	
	if len(data.Measurements) > 0 {
		latest := data.Measurements[len(data.Measurements)-1]
		content.WriteString("<h2>üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h2>\n")
		content.WriteString("<div class=\"metrics\">\n")
		
		content.WriteString(fmt.Sprintf("<div class=\"metric\"><div class=\"metric-name\">–ó–∞—Ä—è–¥:</div><div class=\"metric-value\">%d%%</div></div>\n", latest.Percentage))
		content.WriteString(fmt.Sprintf("<div class=\"metric\"><div class=\"metric-name\">–°–æ—Å—Ç–æ—è–Ω–∏–µ:</div><div class=\"metric-value\">%s</div></div>\n", formatStateWithEmoji(latest.State, latest.Percentage)))
		content.WriteString(fmt.Sprintf("<div class=\"metric\"><div class=\"metric-name\">–¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞:</div><div class=\"metric-value\">%d</div></div>\n", latest.CycleCount))
		content.WriteString(fmt.Sprintf("<div class=\"metric\"><div class=\"metric-name\">–ü–æ–ª–Ω–∞—è –µ–º–∫–æ—Å—Ç—å:</div><div class=\"metric-value\">%d –º–ê—á</div></div>\n", latest.FullChargeCap))
		content.WriteString(fmt.Sprintf("<div class=\"metric\"><div class=\"metric-name\">–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –µ–º–∫–æ—Å—Ç—å:</div><div class=\"metric-value\">%d –º–ê—á</div></div>\n", latest.DesignCapacity))
		content.WriteString(fmt.Sprintf("<div class=\"metric\"><div class=\"metric-name\">–ò–∑–Ω–æ—Å:</div><div class=\"metric-value\">%.1f%%</div></div>\n", data.WearLevel))
		content.WriteString(fmt.Sprintf("<div class=\"metric\"><div class=\"metric-name\">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</div><div class=\"metric-value\">%d¬∞C</div></div>\n", latest.Temperature))
		content.WriteString(fmt.Sprintf("<div class=\"metric\"><div class=\"metric-name\">–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ:</div><div class=\"metric-value\">%d –º–í</div></div>\n", latest.Voltage))
		if latest.AppleCondition != "" {
			content.WriteString(fmt.Sprintf("<div class=\"metric\"><div class=\"metric-name\">–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç Apple:</div><div class=\"metric-value\">%s</div></div>\n", latest.AppleCondition))
		}
		
		content.WriteString("</div>\n")
	}
	
	// –ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏
	content.WriteString("<h2>üíä –ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏</h2>\n")
	statusClass := "status-good"
	if strings.Contains(strings.ToLower(data.HealthStatus), "–ø–ª–æ—Ö–æ–µ") || strings.Contains(strings.ToLower(data.HealthStatus), "—Ç—Ä–µ–±—É–µ—Ç") {
		statusClass = "status-critical"
	} else if strings.Contains(strings.ToLower(data.HealthStatus), "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ") || strings.Contains(strings.ToLower(data.HealthStatus), "–≤–Ω–∏–º–∞–Ω–∏—è") {
		statusClass = "status-warning"
	}
	content.WriteString(fmt.Sprintf("<p class=\"%s\">–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: %s</p>\n", statusClass, data.HealthStatus))
	
	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	if len(data.Recommendations) > 0 {
		content.WriteString("<h2>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>\n")
		for _, rec := range data.Recommendations {
			content.WriteString(fmt.Sprintf("<div class=\"recommendation\">%s</div>\n", rec))
		}
	}
	
	// –ê–Ω–æ–º–∞–ª–∏–∏
	if len(data.Anomalies) > 0 {
		content.WriteString("<h2>‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏</h2>\n")
		for _, anomaly := range data.Anomalies {
			content.WriteString(fmt.Sprintf("<div class=\"anomaly\">%s</div>\n", anomaly))
		}
	}
	
	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	content.WriteString("<h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h2>\n")
	content.WriteString(fmt.Sprintf("<p><strong>–í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π:</strong> %d</p>\n", len(data.Measurements)))
	if len(data.Measurements) > 0 {
		first := data.Measurements[0]
		latest := data.Measurements[len(data.Measurements)-1]
		firstTime, _ := time.Parse(time.RFC3339, first.Timestamp)
		latestTime, _ := time.Parse(time.RFC3339, latest.Timestamp)
		content.WriteString(fmt.Sprintf("<p><strong>–ü–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π:</strong> %s - %s</p>\n", 
			firstTime.Format("2006-01-02 15:04"), 
			latestTime.Format("2006-01-02 15:04")))
		content.WriteString(fmt.Sprintf("<p><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> %s</p>\n", 
			formatDuration(latestTime.Sub(firstTime))))
	}
	
	content.WriteString("<div class=\"footer\">")
	content.WriteString("<p><em>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ BatMon</em></p>")
	content.WriteString("</div>")
	content.WriteString("</div>\n</body>\n</html>")
	
	return os.WriteFile(filename, []byte(content.String()), 0644)
}